##############################
# INI file for ACLI Terminal #
##############################
# Version = 1.13

# This file is read when a new ACLI Terminal is launched and can be used to override default settings
# It can be located in any of these directories in the following order:
# - ENV path %ACLI% (if you defined it)
# - ENV path $HOME/.acli (on Unix systems)
# - ENV path %USERPROFILE%\.acli (on Windows)
# - Same directory where acli.pl resides (ENV path %ACLIDIR%)
#
# NOTE: This file can get updated by the update script if located in the same directory where acli.pl resides (ENV path %ACLIDIR%)
#       if you wish to modify it, place it in one of the other above mentioned directories (or give it a Version = 999)


# NOTE: All values are commented out and show what the default setting is; if you want to set a value, remove the comment '#' and change the value

# Default timeout value in secs; used by CLI object
#
#timeout_val				22


# SSH & Telnet connection timeout - for establishing TCP connection
#
#connect_timeout_val			35


# Timeout in secs to apply to initial login
#
#login_timeout_val			30


# Default timeout value in secs for peer CPU connection
#
#peercp_timeout_val			4


# If true, script tries to detect HostType, and then goes into interact mode, if family type interact flag is set
#
#auto_detect_flg			1
#family_type_interact_flg:BaystackERS	1
#family_type_interact_flg:PassportERS	1
#family_type_interact_flg:ExtremeXOS	1
#family_type_interact_flg:SLX		1
#family_type_interact_flg:ISW		1
#family_type_interact_flg:Series200	1
#family_type_interact_flg:Wing		1
#family_type_interact_flg:HiveOS	1
#family_type_interact_flg:Ipanema	1
#family_type_interact_flg:SecureRouter	1
#family_type_interact_flg:WLAN2300	1
#family_type_interact_flg:WLAN9100	1
#family_type_interact_flg:Accelar	1


# If set and in interact mode, then the prompt_suffix_str will be appended to the switch prompt
#
#prompt_suffix_flg			1
#prompt_suffix_str			'% '


# Handle more paging locally in ACLI Terminal
#
#more_paging_flg			1
#more_paging_lines_val			22


# Enable/Disable command aliasing
#
#alias_enable_flg			1


# Enable/Disable echoing of how an alias is replaced with a switch command
#
#alias_echo_flg				1


# Enable/Disable echoing of how a variable is replaced within a switch command
#
#vars_echo_flg				1


# Enable/Disable echoing of how a history recalled command (using !) is used
#
#history_echo_flg			1


# Enable/Disable echoing of how a dictionary command is translated
# 0 = off; 1 = on always; 2 = only if translation is a single command (not if many)
#
#dictionary_echo_flg			2


# Set CTRL characters
# - to break into ACLI control command line
#ctrl_escape_chr			'^]'

# - to quit terminal
#ctrl_quit_chr				'^Q'

# - to toggle between interact & transparent modes
#ctrl_interact_toggle_chr		'^T'

# - to toggle between local more paging enabled and disabled
#ctrl_more_toggle_chr			'^P'

# - to send the break signal
#ctrl_break_chr				'^S'

# - to clear the screen
#ctrl_clear_screen_chr			'^L'

# - to dump debug information (only if in debug mode)
#ctrl_debug_chr				'^['


# Number of SPACE chars to use when indenting an ACLI config
#
#grep_indent_val			3


# Does '?' behave like in acli/nncli (1) or like with old Passport CLI (0)
#
#syntax_acli_mode_flg			1


# Timer in minutes for sending keep alive carriage returns to prevent device from timing out session (0 to disable keep alives)
#
#keepalive_timer_val			4

# Determines whether keep alive carriage returns should also be sent in transparent mode
# 0 = no, only in interactive mode; 1 = yes, in both interactive and transparent modes
# Note that there is no suppression of prompts generated by keepalive in transparent mode
#
#transparent_keepalive_flg		0

# Timer in minutes for holding up session to device (0 to disable session timeout)
#
#session_timeout_val			600


# Enable socket functionality to drive many terminals from one
#
#socket_enable_flg			1


# Local IP interface where to bind sockets; normally the loopback address
# To bind to all available IP interfaces use empty string ''
#
#socket_bind_ip_str			127.0.0.1


# Socket Multicast IP used to send on controlling (tied) terminal
# Must be a Multicast address in range 224.0.0.1 - 239.255.255.255
#
#socket_send_ip_str			127.255.255.255


# IP TTL to use on socket IP Multicast packets; on loopback interface can stay at 0 
#
#socket_send_ttl_val			0


# Determines whether the username is encoded in socket datagrams; needed if socket functionality is used by different users on same machine
#
#socket_send_username_flg		1


# Socket source IPs from which listening terminals will accept commands; normally only the loopback IP
# A comma separated list of IPs can be provided 
#
#socket_allowed_source_ip_lst		[ 127.0.0.1 ]


# Socket port number base. The 'all' port is always defined and determines the starting UDP port number used for sockets
# Note that if an acli.sockets file already exists, then the port numbers will be read from that file
#
#socket_names_val:all			50000


# Local echo in Socket tied terminal: 0 = no echo; 1 = only errors messages; 2 = all output
#
#socket_echo_mode_val			1


# Pseudo terminal prompt
#
#pseudo_prompt_str			'PSEUDO#'


# Determines whether or not we want to pause sourcing commands if an error is detected from the connected device
# Detection can be set for all errors or just warnings
#
#source_error_detect_flg		1
#source_error_level_str			'error'

# Newline character to send to connected host; can be set to "\n" (CR+LF) or "\r"(CR)
#
#newline_chr				"\r"


# Default terminal emulation type (does not really matter for most Extreme devices)
# (Can also be set via -y command line switch)
#
#terminal_emulation_str			'vt100'


# Default window size, width & columns; this determines what the terminal negotiates with the connected device
# Note that this is not related to the window size of the ConsoleZ application window.
# Matters on WLAN9100, which uses the negotiated size for command line scrolling & more paging
# (Can also be set via -z command line switch)
#
#terminal_window_size_lst2		[132, 24]


# Highlight text formatting (used with ^<pattern>)
# Foreground & background colour, accepted values are: black|red|green|yellow|blue|magenta|cyan|white|disable
#
#highlight_fg_colour_str		'red'
#highlight_bg_colour_str		'disable'
#highlight_text_bright_flg		1
#highlight_text_underline_flg		0
#highlight_text_reverse_flg		0


# List of SSH Private keys to try and load on startup; the first key found will be loaded
# Provide either the key basename(s) or full key path(s)
# If just basenames are provided, the keys will be searched in these paths:
# - %ACLI%\.ssh (if you defined it)
# - ENV path $HOME/.ssh (on Unix systems)
# - %USERPROFILE%\.ssh (on Windows)
# - %ACLIDIR%\.ssh (the ACLI install directory)
#
#ssh_default_keys_lst			['id_rsa', 'id_dsa']


# When the active connection is lost: 0 = offer to reconnect; 1 = quit
# (Can also be set via -x command line switch)
#
#quit_on_disconnect_flg			0


# Working directory to use
# (Can also be set via -w command line switch)
#
#working_directory_str			''


# Automatically log session to file: 0 = disabled; 1 = enabled
# (Can also be set via -j command line switch)
#
#auto_log_to_file_flg			0


# This setting determines in which directory the log files will be created (with or without auto-log)
# If no path is provided, then session log files will be created in current working directory
#
#log_path_str				''


# If auto-log is enabled, the filename used will be the device IP or hostname (whichever was provided to make the connection)
# Via this setting it is possible to pre-pend or append a timestamp to the actual filename.
# If set to an empty string, the auto-log filename will simply be the ip/hostname of the connection.
# The "<>" characters represent the ip/hostname portion of the filename, so the timestamp can be either pre-pended or appended
# as desired; if no "<>" characters are included then the timestamp will be pre-pended.
# To format the desired timestamp, provide a string supported by POSIX strftime (see http://perldoc.perl.org/POSIX.html#strftime)
# The string can also include one or more '/' or '\' characters and this will result in the log files being created in
# sub-directories from the logging root directory (set with log_path_str above); this however only makes sense when pre-pending,
# for example '%Y_%m_%d/%Hh%Mm%Ss-<>' will result in the log files being created in by date subdirectories. 
#
#auto_log_filename_str			'%Y_%m_%d-%Hh%Mm%Ss-<>'


# Master terminal-server file. This key should either point to a filename under the ACLI install directory or to the full path
# to any other file (if not located in the ACLI directory).
# If set and the file exists, the date of the file will be compared with the date of the user's personal terminal-server file
# (%USERPROFILE%\.acli\acli.trmsrv), if it exists, and whichever is the most recent will be used.
# Setting this key allows any modification of the master terminal-server file to automatically result in it being used next time
# without having to execute 'trmsrv delete file' under the ACLI control interface.
# Do not set this key to the acli.trmsrv file under your personal directory (%USERPROFILE%\.acli); not setting this key will
# result in that file always being used if present anyway.
#
#master_trmsrv_file_str			''


# Hide banner timestamps. Some switches display a banner with a timestamp before every show command which is executed.
# These banners take up space in the display window and can be annoying if you need to copy-paste output from the display.
# Enabling this flag will hide these timestamp banners from the output window but, if file logging is active, will still include
# them in the log file.
#
#hide_timestamps_flg			0


# Port ranges to span slots. On some devices, like VOSS and XOS, the following port ranges are allowed: 1/1-2/48 (or 1:1-2:48).
# While undeniably more compact, ACLI will default not to show ranges spanning slots, and will only create ranges within the same
# slot, like 1/1-1/48,2/1-2/48, which is more easily readable and the last port of each slot is easily recognizeable.
# This was already the case before ACLI version 4.02, but then changed. Now the pre 4.02 default is restored but made user
# configuarable via this ini key
#
#port_ranges_span_slots_flg		0


# On devices which do not support port ranges (e.g. SecureRouter or WLAN APs generally) this setting determines how ACLI will
# display port lists (stored in variables). Valid settings are: 0 no range just comma separated list; 1 ranges in format 1/1-24;
# 2 ranges in format 1/1-1/24
#
#default_port_range_mode_val		1


# ACLI will always process port ranges based on actual ports discovered on the connected switch.
# A port range expanded into a list ($var) will only include ports which actually exist on the connected switch.
# There are some script uses where it is handy if ports can be captured from output received over tied sockets from other switches
# by disabling this parameter. If enabled port ranges will only handle slot/port (are not processed: 'ALL', slot/port/chann,
# insight 1/s<n> ports)
#
#port_ranges_unconstrain_flg		0


# Commands typed (or pasted) and executed in interactive mode are highlighted (made bright) so that they can be easily identified
# when scrolling back in the session window. This enhancement is by defaut active. Use this key to disable it.
#
#highlight_entered_command_flg		1


# SSH known hosts missing key behaviour. This setting determines how ACLI should behave when connecting via SSH to a host for
# which the key is missing in the known_hosts file (or no known_hosts file exists yet). This typically happens when SSH connecting
# to a host for the very first time.
# The following ini key can be set to achieve these behaviours:
# - 0 : SSH connection is refused
# - 1 : User gets interactively prompted whether to add the key for the host in the known_hosts file, or to connect once without
#       adding the key to known_hosts, or to abort the connection (this is the default behaviour)
# - 2 : The key is automatically added to known_hosts file and a message is displayed to this effect (this used to be the default
#       behaviour in ACLI versions up to 5.02 before this ini key was implemented)
#
#ssh_known_hosts_key_missing_val	1


# SSH known hosts failure check behaviour. This setting determines how ACLI should behave when connecting via SSH to a host for
# which the key is already present in the known_hosts file, but the key offered by the host does not match the key cached in the
# known_hosts file. This could indicate a man in the middle attack, where some rogue device has taken the IP address of the
# target machine; or it can happen if the switch was defaulted as it will then get a new SSH key and hence the new key won't
# match what was cached in the known_hosts file. It is enough to go and delete the host from the known_hosts file and reconnect,
# all of which can be done via ACLI's control interface.
# To simply the above, the following ini key can be set to achieve these behaviours:
# - 0 : SSH connection is refused (this used to be the default behaviour in ACLI versions up to 5.02 before this ini key was
#       implemented)
# - 1 : User gets interactively prompted whether to update the key for the host in the known_hosts file, or to connect once
#       without updating the key in known_hosts, or to abort the connection (this is the default behaviour)
# - 2 : The key is automatically updated with the new key in the known_hosts file and a message is displayed to this effect
#       (Note, this is not a safe option)
#
#ssh_known_hosts_key_changed_val	1

