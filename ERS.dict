# BOSS/ERS Dictionary file
# Version = 1.02

# This file should be placed either in the same directory as acli.pl or else in your home directory (ENV paths HOME & USERPROFILE are checked)
# If the file is present in multiple paths the order of preference is the following:
# - ENV path %ACLI% (if you defined it)
# - ENV path $HOME/.acli (on Unix systems)
# - ENV path %USERPROFILE%\.acli (on Windows)
# - Same directory where acli.pl resides (ENV path %ACLIDIR%)
#
# Note that if you use the ACLI Update script, a new version of this file might overwrite the existing one in the acli.pl directory
# Hence, if you want to edit this file, you should place it under your home directory, then the ACLI Update script will not touch it

# There are four parts to a dictionary file
# - Description        : This should be the very first commented line; this line will show when executing "@dictionary list"
# - Dictionary version : This should follow the first line providing a version for the dictionary file
#                        Version number is shown when executing "@dictionary list" and used by the update script to determine if a newer
#                        version of this file exists.
# - Script section     : Used to declare dictionary varialble scope and to execute an arbitrary script upon loading the dictionary file
#                        This section will include all non-commented lines before line "DICT_BEGIN"
# - Dictionary section : Section where every dictionary command is defined with its possible translations
#                        This section will include all non-commented lines after line "DICT_BEGIN"

# Syntax:
#	Lines commencing with '#' are comment lines and are ingnored
#	Comments can also be placed at the end of lines
#
# Dictionary section syntax:
#	Line to declare the comment character of dictionary device: DICT_COMMENT_LINE = "<character>"
#	Line with no spaces or tab prepended; this line is where a dictionary command is defined
#	Then, on subsequent lines, a number of translation commands based on certain conditions
#	These translation lines must start with space or tab (i.e. indentation)
#
# Dictionary command syntax:
#	Enter dictionary command fully expanded and with all mandatory and optional sections listed in the right order
#	The defined syntax should cover the config lines as produced by the original device in its own generated config file
#	and can also cover other config variants if the dictionary is expected to help interactively with processing them.
#	Optional sections can be enclosed in square brackets []
#	Arguments can be enclosed in <> by including the argument name inside <> and followed by valid argument syntax after ":"
#	Example (must not start with any spaces):
#	vlan ports <ports> pvid <pvid:1-4094> [filter-untagged-frame <filtUntag:enable,disable>]
#
# Dictionary command argument syntax:
#	<name>			: Argument variable which will accepts any string
#	<name:1-10>		: Argument variable which will accept a number between 1 and 10
#	<name:1-10,>		: Argument variable which will accept a list and/or range of numbers where all numbers must be between 1 and 10
#	<name:value1,value2,etc>: Argument variable which will accept only discrete values: "value1" or "value2" or ect..
#	<port>			: When name = 'port', the argument variable only accepts a single valid port for the connected host (or in the defined input port range)
#	<ports>			: When name = 'ports', the argument variable accepts a list and/or range of valid ports for the connected host (or in the defined input port range)
#
# Translation lines:
#	One or more of these lines must follow each dictionary command, and must be indented (start with space or tab)
#	These lines have 2 fields, in one of these 2 formats:
#
#		<condition_field> = <translation for dictionary command if condition_field is true>
#		<condition_field> = &<instruction> [<input based on instruction; can be in double quotes>]
#
#	The condition field can contain any of Control::CLI:Extreme attributes in {} brackets.
#	You can find available attributes here:
#		https://metacpan.org/pod/Control::CLI::Extreme#Main-I/O-Object-Methods
#		See: attribute() - Return device attribute value
#
#	The condition field can also contain the <argument> values entered by user in the dictionary command
#	The condition field is evaluated as a regular perl expression, after making the above {attribute} & <argument> replacements
#	Condition fields are evaluated in order, until one evaluates to true
#	Once a condition field evaluates to true, the dictionary command is translated accordingly
#	If no condition field evaluates to true, then you get a message on the terminal indicating no translation was found for the command
#
#	The translation command is the actual command which acli.pl will send to the switch if the condition_field evaluates to true
#	The <argument> values can of course be embedded in the command supplied here
#	If dealing with an optional <argument> this should again be encloded in square brackets '[]' which can also include a portion of the
#	final CLI command
#	In both the first syntax above, you can chain multiple commands to send to the switch with semicolons (;) and you can also separate these
#	commands over multiple lines provided that every line begins with one or more space/tab characters and the first non-space character
#	is a semicolon (;) followed by a command
#
#	It is also possible to request alternative actions using the &<instruction> format. The following instructions are supported:
#
#		&ignore ["optional text to print"] : Do not send the command to the connected host; optionally print a message instead
#		&error ["optional text to print"]  : Stop sourcing and optionally print a message to alert user to a problem
#		&same                              : For some target product families, the command is the same and requires no translation
#		                                     (This instruction can also be part of a larger translation script)
#
# This file was edited with Tab = 8 space characters; set to same on your editor for better viewing

######################
# Script Section     #
######################

@echo off output off
@print "Sourcing ERS Dictionary script\n"
@my $dct_*
@if $_is_voss
	$*DefaultVlan = 1	# Assume VLAN 1
	show dvr |Role > $*DvrRole %3
	@if $*DvrRole eq 'Leaf'
		$*UniMode = 2
		@print "This VSP is a DVR Leaf and will be configured with Switched-UNI"
	@else
		@if !$*UniMode	# If @dictionary reload, dict vars stay set
			@loop
				@vars prompt optional $*UniMode "Which VSP UNI config will apply for dictionary translations; CVLAN-UNI (1) or Switched-UNI (2) ? Enter 1 or 2"
			@until $*UniMode eq "1" || $*UniMode eq "2"
		@endif
		show vlan basic|onboarding-vlan > $*DefaultVlan %1	# Overwrite if onboarding VLAN
		@if $*UniMode eq "2"	# In Switched-UNI mode, make sure spbm has been enabled
			show spbm|spbm > $*Spbm %3
			@if $*Spbm ne 'enable'
				@print "\nEnabling SPBM globally"
				config term
				spbm
				$*Spbm='enable'
			@endif
		@endif
	@endif
@endif
@echo sent


DICT_BEGIN	# Dictionary definitions begin after this line

######################
# Dictionary Section #
######################

DICT_COMMENT_LINE = "!"

configure terminal
	{is_voss}	= &same		# This definition can also be omitted..
	{is_xos}	= &ignore

[no] autosave enable
	1		= &ignore

interface Ethernet <ports>
	{is_voss}	= interface gigabitEthernet <ports>
	{is_xos}	= $*PortContext = <ports>

shutdown
	{is_xos}	= disable $*PortContext

no shutdown
	{is_xos}	= enable $*portContext

exit
	{is_voss}	= &same
	{is_xos}	= &ignore

end
	{is_xos}	= &ignore

#
# Global commands
#

vlan configcontrol <mode:automatic,autopvid,flexible,strict>
	1		= &ignore

vlan create <vids:2-4094,> type port [cist] [<inst:1-8>] [<vvln:voice-vlan>]	# We throw <inst> away as we don't care
	{is_voss}	= @if $*UniMode eq "1"
			; 	vlan create %s type port-mstprstp 0 &'<vids>
			; @endif
			; @if "<vvln>"; $*VoiceVlan = <vids>; @endif	# <vids> single value if voice-vlan
	{is_xos}	= create vlan %s &'<vids>

vlan name 1 <name>
	1		= &ignore

vlan name <vid:2-4094> <name>
	{is_voss}	= @if $*UniMode eq "1"  # CVLAN-UNI
			; 	&same
			; @else  # SW-UNI
			; 	$*VlanName{<vid>} = <name>	# Need to remember the name for when I-SID gets created
			; @endif
	{is_xos}	= configure vlan <vid> name <name>
			; $*VlanName{<vid>} = <name>

vlan ports <ports> [priority <prio:0-7>] [name <name>]	# ERS can name ports under VLAN or interface; we translate both in same way
	{is_voss}	= interface gigabitEthernet <ports>
			;    [qos level <prio>]
			;    [name <name>]
			; exit
	{is_xos}	= [configure ports <ports> display-string <name>]
			; [configure ports <ports> description-string <name>]
			; [configure ports 1 qosprofile qp<prio>]

vlan ports <ports> tagging tagAll
	{is_voss}	= @if $*UniMode eq "1"  # CVLAN-UNI
			; 	&same		# VOSS has this ERS command
			; @else  # SW-UNI
			; 	@for $*port &'<ports>
			; 		$*PortTag{$*port} = tagged
			; 	@endfor
			; 	vlan members remove $*DefaultVlan <ports>
			; 	interface gigabitEthernet <ports>
			; 	   no private-vlan
			;	   @error disable
			; 	   flex-uni enable
			;	   @error enable
			; 	exit
			; @endif
	{is_xos}	= @for $*port &'<ports>
			; 	$*PortTag{$*port} = tagged
			; @endfor

vlan ports <ports> tagging tagAll filter-untagged-frame enable
	{is_voss}	= @if $*UniMode eq "1"  # CVLAN-UNI
			; 	interface gigabitEthernet <ports>
			; 	   encapsulation dot1q
			; 	   untagged-frames-discard
			; 	exit
			; @else  # SW-UNI
			; 	@for $*port &'<ports>
			; 		$*PortTag{$*port} = tagged
			; 	@endfor
			; 	vlan members remove $*DefaultVlan <ports>
			; 	interface gigabitEthernet <ports>
			; 	   no private-vlan
			;	   @error disable
			; 	   flex-uni enable
			;	   @error enable
			; 	exit
			; @endif
	{is_xos}	= @for $*port &'<ports>
			; 	$*PortTag{$*port} = tagged
			; @endfor
			; @print "There is no option for filter-untagged-frame on XOS"

vlan ports <ports> tagging untagAll
	{is_voss}	= @if $*UniMode eq "1"  # CVLAN-UNI
			; 	&same		# VOSS has this ERS command
			; @else  # SW-UNI
			; 	@for $*port &'<ports>
			; 		$*PortTag{$*port} = untagged
			; 	@endfor
			; 	vlan members remove $*DefaultVlan <ports>
			; 	interface gigabitEthernet <ports>
			; 	   no private-vlan
			;	   @error disable
			; 	   flex-uni enable
			;	   @error enable
			; 	exit
			; @endif
	{is_xos}	= @for $*port &'<ports>
			; 	$*PortTag{$*port} = untagged
			; @endfor

vlan ports <ports> tagging unTagPvidOnly
	{is_voss}	= @if $*UniMode eq "1"  # CVLAN-UNI
			; 	interface gigabitEthernet <ports>
			; 	    encapsulation dot1q
			; 	    untag-port-default-vlan enable
			; 	exit
			; @else  # SW-UNI
			; 	@for $*port &'<ports>
			; 		$*PortTag{$*port} = untagPvid
			; 	@endfor
			; 	vlan members remove $*DefaultVlan <ports>
			; 	interface gigabitEthernet <ports>
			; 	   no private-vlan
			;	   @error disable
			; 	   flex-uni enable
			;	   @error enable
			; 	exit
			; @endif
	{is_xos}	= @for $*port &'<ports>
			; 	$*PortTag{$*port} = untagPvid
			; @endfor

i-sid <isid:1-15999999> vlan <vid:1-4094>
	{is_voss}	= @if $*UniMode eq "1"  # CVLAN-UNI
			; 	vlan i-sid <vid> <isid>
			; @else  # SW-UNI
			; 	$*VlanIsid{<vid>} = <isid>
			; @endif
	{is_xos}	= configure vlan <vid> add isid <isid>

vlan members [add] <vids:1-4094,> <ports>
	{is_voss}	= @if $*UniMode eq "1"  # CVLAN-UNI
			; 	@if $*DefaultVlan == 4048
			; 		vlan members remove $*DefaultVlan <ports>
			; 		interface gigabitEthernet <ports>
			; 		   no private-vlan
			; 		exit
			; 	@endif
			; 	vlan members add %s <ports> &'<vids>
			; @else  # SW-UNI
			; 	@for $*vlan &'<vids>
			; 		@if !$*VlanIsid{$*vlan}
			; 			@stop "Please configure VLAN I-SIDs before the vlan port members"
			; 		@endif
			; 		@for $*port &'<ports>
			; 			@if $*PortTag{$*port} eq 'tagged'
			; 				i-sid $*VlanIsid{$*vlan}
			; 				   c-vid $*vlan port $*port
			; 				exit
			; 			@elsif $*PortTag{$*port} eq 'untagPvid'
			; 				@if !$*PortPvid{$*port}
			;					$*PortPvid{$*port} = 1 # If it was not set, it is VLAN1
			; 				@endif
			; 				i-sid $*VlanIsid{$*vlan}
			; 				   @if $*PortPvid{$*port} eq $*vlan
			; 					untagged-traffic port $*port
			; 				   @else
			; 					c-vid $*vlan port $*port
			; 				   @endif
			; 				exit
			; 			@else  # We assume 'untagged' even if this was not set
			; 				vlan members remove $*DefaultVlan $*port
			; 				interface gigabitEthernet $*port
			; 				   no private-vlan
			;				   @error disable
			; 				   flex-uni enable
			;				   @error enable
			; 				exit
			; 				i-sid $*VlanIsid{$*vlan}
			; 				   untagged-traffic port $*port
			; 				exit
			; 			@endif
			; 		@endfor
			; 		@if $*VlanName{$*vlan}
			; 			i-sid name $*VlanIsid{$*vlan} $*VlanName{$*vlan}
			; 		@endif
			; 	@endfor
			; @endif
	{is_xos}	= @for $*vlan &'<vids>
			; 	@for $*port &'<ports>
			; 		@if $*PortTag{$*port} eq 'tagged'
			; 			configure vlan $*vlan add ports $*port tagged
			; 		@elsif $*PortTag{$*port} eq 'untagPvid'
			; 			@if !$*PortPvid{$*port}
			;				$*PortPvid{$*port} = 1 # If it was not set, it is VLAN1
			; 			@endif
			; 			@if $*PortPvid{$*port} eq $*vlan
			; 				configure vlan $*vlan add ports $*port untagged
			; 			@else
			; 				configure vlan $*vlan add ports $*port tagged
			; 			@endif
			; 		@else  # We assume 'untagged' even if this was not set
			; 			configure vlan $*vlan add ports $*port untagged
			; 		@endif
			; 	@endfor
			; @endfor

vlan ports <ports> pvid <pvid:1-4094>
	{is_voss}	= @if $*UniMode eq "1"  # CVLAN-UNI
			; interface gigabitEthernet <ports>
			;    default-vlan-id <pvid> 
			; exit
			; @else  # SW-UNI
			; 	@for $*port &'<ports>
			; 		$*PortPvid{$*port} = <pvid>
			; 	@endfor
			; @endif
	{is_xos}	= @for $*port &'<ports>
			; 	$*PortPvid{$*port} = <pvid>
			; @endfor
			; configure vlan <pvid> add ports <ports> untagged

qos if-group name <name> class <class:trusted,unrestricted,untrusted,untrustedbasic,untrustedv4v6>
	{is_voss}	= &ignore "ERS QoS commands are not translated; on VOSS all ports trust with default config" 
	{is_xos}	= &ignore "ERS QoS commands are not translated; on XOS all ports trust L2 p-bits with default config" 

qos if-assign port <ports> name <name>
	{is_voss}	= &ignore "ERS QoS commands are not translated; on VOSS all ports trust with default config" 
	{is_xos}	= &ignore "ERS QoS commands are not translated; on XOS all ports trust L2 p-bits with default config" 

snmp trap link-status [port <ports>] <mode:enable,disable>
	{is_voss}	= &ignore "No such feature on VOSS" 
	{is_xos}	= &ignore "No such feature on XOS"

vlacp enable
	{is_voss}	= &same 
	{is_xos}	= &ignore "No such feature on XOS"

vlacp macaddress 180.c200.f
	{is_voss}	= $*vlacpMac = 1
	{is_xos}	= &ignore "No such feature on XOS"


#
# Interface commands
#

auto-negotiation-advertisements [port <ports>] [<f10:10-full>] [<h10:10-half>] [<f100:100-full>] [<h100:100-half>] [<f1000:1000-full>] [<apf:asymm-pause-frame>]
	{is_voss}	= [interface gigabitEthernet <ports>]
			; auto-negotiation-advertisements [<f10>] [<h10>] [<f100>] [<h100>] [<f1000>]
	{is_xos}	= &ignore "No CANA on XOS !"

speed [port <ports>] <speed:10,100,1000,10000,auto>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; @if "<speed>" eq 'auto'
			; 	auto-negotiate enable
			; @else
			; 	no auto-negotiate enable
			; 	speed <speed>
			; @endif
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; @if "<speed>" eq 'auto'
			; 	configure ports $*ports auto on
			; @else
			; 	@for $*port &'$*ports
			; 		@if $*PortDuplex{$*port}
			; 			configure ports $*port auto off speed <speed> duplex $*PortDuplex{$*port}
			; 		@else
			; 			configure ports $*port auto off speed <speed> duplex half
			; 		@endif
			; 		$*PortSpeed{$*port} = <speed>
			; 	@endfor
			; @endif

duplex [port <ports>] <duplex:half,full>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; @if "<duplex>" eq 'auto'
			; 	auto-negotiate enable
			; @else
			; 	no auto-negotiate enable
			; 	duplex <duplex>
			; @endif
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; @if "<duplex>" eq 'auto'
			; 	configure ports $*ports auto on
			; @else
			; 	@for $*port &'$*ports
			; 		@if $*PortSpeed{$*port}
			; 			configure ports $*port auto off speed $*PortSpeed{$*port} duplex <duplex>
			; 		@else
			; 			@print "Please set port speed first"
			; 		@endif
			; 		$*PortDuplex{$*port} = <duplex>
			; 	@endfor
			; @endif

name [port <ports>] <name>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; name <name>
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; configure ports $*ports display-string <name>
			; configure ports $*ports description-string <name>

poe poe-priority [port <ports>] <prio:critical,high,low>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; poe poe-priority <prio>
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; configure inline-power priority <prio> ports $*ports

poe poe-limit [port <ports>] <limit:3-32>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; poe poe-limit <limit>
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; configure inline-power operator-limit {<limit> * 1000} ports $*ports	# XOS takes milliwat input

slpp-guard [port <ports>] enable [timeout <timeout:0-65535>]
	{is_voss}	= [interface gigabitEthernet <ports>]
			; &same
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; $*timeout = <timeout>
			; @if !length $*timeout
			; 	configure slpp guard ports $*ports recovery-timeout 60
			; @elsif $*timeout == 0
			; 	configure slpp guard ports $*ports recovery-timeout none
			; @else
			; 	configure slpp guard ports $*ports recovery-timeout <timeout>
			; @endif

spanning-tree bpdu-filtering [port <ports>] enable [timeout <timeout:0-65535>]
	{is_voss}	= [interface gigabitEthernet <ports>]
			; spanning-tree bpduguard enable [timeout <timeout>]
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; $*timeout = <timeout>
			; @if !length $*timeout
			; 	configure stpd s0 ports edge-safeguard enable 1 bpdu-restrict recovery-timeout 120
			; @elsif $*timeout == 0
			; 	configure stpd s0 ports edge-safeguard enable 1 bpdu-restrict
			; @else
			; 	configure stpd s0 ports edge-safeguard enable 1 bpdu-restrict recovery-timeout <timeout>
			; @endif

spanning-tree mstp [port <ports>] edge-port <edge:true,false>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; spanning-tree mstp edge-port <edge>
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; @if "<edge>" eq 'true'
			; 	configure stpd s0 ports auto-edge on
			; @else
			; 	configure stpd s0 ports auto-edge off
			; @endif

spanning-tree mstp [port <ports>] learning enable
	{is_voss}	= [interface gigabitEthernet <ports>]
			; spanning-tree mstp force-port-state enable
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; enable stpd s0 ports <ports>

spanning-tree mstp [port <ports>] learning disable
	{is_voss}	= [interface gigabitEthernet <ports>]
			; no spanning-tree mstp
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; disable stpd s0 ports <ports>

spanning-tree [port <ports>] learning fast
	{is_voss}	= [interface gigabitEthernet <ports>]
			; spanning-tree mstp edge-port true
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; configure stpd s0 ports auto-edge on

rate-limit [port <ports>] <what:both,broadcast,multicast> <percent:0-10>
	{is_voss}	= &error "Please use packet/sec ERS syntax to convert command"
	{is_xos}	= &error "Please use packet/sec ERS syntax to convert command"

rate-limit [port <ports>] <what:both,broadcast,multicast> percent <percent:0-10>
	{is_voss}	= &error "Please use packet/sec ERS syntax to convert command"
	{is_xos}	= &error "Please use packet/sec ERS syntax to convert command"

rate-limit [port <ports>] <what:both,broadcast,multicast> pps <pps:0-262143>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; $*what = <what>
			; @if $*what eq 'both' || $*what eq 'broadcast'
			; 	rate-limit broadcast <pps>
			; @endif
			; @if $*what eq 'both' || $*what eq 'multicast'
			; 	rate-limit multicast <pps>
			; @endif
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; $*what = <what>
			; @if $*what eq 'both' || $*what eq 'broadcast'
			; 	configure ports $*ports rate-limit flood broadcast <pps>
			; @endif
			; @if $*what eq 'both' || $*what eq 'multicast'
			; 	configure ports $*ports rate-limit flood multicast <pps>
			; @endif

lldp med-network-policies [port <ports>] voice dscp <dscp:0-63> [priority <prio:0-7>] [tagging <tag:tagged,untagged>] vlan-id <vid:0-4094>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; lldp med-network-policies voice dscp <dscp> [priority <prio>] [tagging <tag>] vlan-id <vid>
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; $*tag = <tag>
			; @if $*tag eq 'tagged'
			; 	configure lldp ports $*ports advertise vendor-specific med policy application voice vlan $*VlanName{<vid>} dscp <dscp> priority-tagged
			; @else
			; 	configure lldp ports $*ports advertise vendor-specific med policy application voice vlan $*VlanName{<vid>} dscp <dscp>
			; @endif

lldp med-network-policies [port <ports>] voice-signaling dscp <dscp:0-63> [priority <prio:0-7>] [tagging <tag:tagged,untagged>] vlan-id <vid:0-4094>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; lldp med-network-policies voice-signaling dscp <dscp> [priority <prio>] [tagging <tag>] vlan-id <vid>
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; $*tag = <tag>
			; @if $*tag eq 'tagged'
			; 	configure lldp ports $*ports advertise vendor-specific med policy application voice-signaling vlan $*VlanName{<vid>} dscp <dscp> priority-tagged
			; @else
			; 	configure lldp ports $*ports advertise vendor-specific med policy application voice-signaling vlan $*VlanName{<vid>} dscp <dscp>
			; @endif

no lldp med-network-policies [port <ports>] <med:voice,voice-signaling>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; no lldp med-network-policies <med>
	{is_xos}	= $*ports = <ports>
			; @if !$*ports
			; 	$*ports = $*PortContext
			; @endif
			; configure lldp ports $*ports no-advertise vendor-specific med policy application <med>

lacp mode [port <ports>] <mode:active,passive,off>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; @if '<mode>' eq 'off'
			; 	no lacp enable
			; @else
			; 	lacp mode <mode>
			; @endif
	{is_xos}	= &ignore "For LACP configure port sharing on EXOS!"

vlacp [port <ports>] timeout <timeout:short,long>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; vlacp timeout <timeout>
	{is_xos}	= &ignore "No such feature on XOS"

vlacp [port <ports>] timeout-scale <timeout-scale:1-10>
	{is_voss}	= [interface gigabitEthernet <ports>]
			; vlacp timeout-scale <timeout-scale>
	{is_xos}	= &ignore "No such feature on XOS"

vlacp port <ports> enable
	{is_voss}	= interface gigabitEthernet <ports>
			; @if $*vlacpMac
			; 	vlacp funcmac-addr 01:80:c2:00:00:0f
			; @endif
			; vlacp enable
	{is_xos}	= &ignore "No such feature on XOS"
