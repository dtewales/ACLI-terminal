# Setup SNMP on the switch
# Version = 1.04
# Suppress all commands and output from switch
@echo off output off

#
# Check we are on a Modular or Stackable, in ACLI mode, if not bomb out
#
@if $_family_type ne 'PassportERS' && $_family_type ne 'BaystackERS'
	@print "This run script only works with VSP & ERS switches"
	@exit
@elsif !$_is_acli
	@print "This run script only works with the switch in ACLI mode"
	@exit
@endif

#
# Process arguments; in 'test' mode config commands are not executed, just @print-ed; in 'debug' mode all output is visible
#
@if $1 eq '?' || $2 eq '?'
	@print
	@print "Syntax: @run snmp [test] [debug]"
	@print
	@print "	test	= configuration commands are displayed, not sent to switch"
	@print "	debug	= @echo is not turned off, so all activity can be seen"
	@print
	@exit
@endif
@if $1 eq 'debug' || $2 eq 'debug'
	@print "Running in debug mode"
	$debug = 1
	@echo on
@endif
@if $1 eq 'test' || $2 eq 'test'
	@print "Running in test mode; config commands are printed, not executed"
	# In test mode insert a @print before the command, so it gets printed and not executed
	$do = '@print --:'
@else
	# If not in test mode, then insert nothing, so command is executed
	$do = ' '
@endif

#
# Make sure user wants to proceed
#
@print
@print "This script will help you setup SNMP on the switch"
@vars prompt optional $_ "Hit Enter to continue (CTRL-C to quit)"

#
# Enter config mode
#
$do config term

#
# Remove default, unsecure, entries
#
@if $_family_type eq 'PassportERS'
	# Check if default SNMPv1v2 communities exist, and offer to delete them
	show snmp-server community|first\b,second\b > $commidx '%1'
	@if $commidx
		@if !$debug
			@echo off output on
		@endif
		show snmp-server community||first,second
		@if !$debug
			@echo off output off
		@endif
		@print "Default SNMPv1v2 community strings exist"
		@vars prompt optional $_ "Would you like to remove them (y/n) ?"
		@if "yes" =~ /^$_/i
			@for $idx &$commidx
				$do no snmp-server community-by-index $idx
			@endfor
		@endif
	@endif
	
	# Check if default SNMPv3 initial user exists, and offer to delete it
	show snmp-server user|initial > $initial '%1'
	@if $initial
		@if !$debug
			@echo off output on
		@endif
		show snmp-server user||initial
		@if !$debug
			@echo off output off
		@endif
		@print "Default SNMPv3 usm initial user exists"
		@vars prompt optional $_ "Would you like to remove it (y/n) ?"
		@if "yes" =~ /^$_/i
			$do no snmp-server user initial
		@endif
	@endif
@else
	# 'BaystackERS', just delete both community strings
	$do no snmp-server community ro
	$do no snmp-server community rw
@endif

#
# Prompt what version of SNMP to use
#
@loop
	@vars prompt $snmpversion "What SNMP version to setup (v1 | v2c | v3) ?"
@until $snmpversion =~ /^v(1|2c|3)$/

#
# Accept input and create new SNMP users
#
@vars prompt optional $_ "Create snmp users (y/n) ?"
@if "yes" =~ /^$_/i
	@loop
		@if $snmpversion eq "v3"
			# Clear all variables used below, in case we loop around
			$usmuser = ''
			$usmauth = ''
			$usmauthpwd = ''
			$usmpriv = ''
			$usmprivpwd = ''
			$access = ''

			# Request input for SNMPv3
			@vars prompt $usmuser "Please enter Usm user name :"
			@loop
				@vars prompt $usmauth "Authentication for user $usmuser (sha | md5) :"
			@until $usmauth =~ /^(sha|md5)$/
			@vars prompt $usmauthpwd "Authentication password user $usmuser :"
			@loop
				@vars prompt optional $usmpriv "Privacy encryption for user $usmuser (aes | des) [for no encryption enter nothing to skip] :"
			@until !$usmpriv || $usmpriv =~ /^(aes|des)$/
			@if $usmpriv
				@vars prompt $usmprivpwd "Encryption password user $usmuser :"
			@endif
			@loop
				@vars prompt $access "Access rights for user $usmuser (read-write | read-only | rw | ro) :"
			@until $access =~ /(read|write|only)/ || $access =~ /^(rw|ro)$/

			# Configure
			@if $_family_type eq 'PassportERS'
				$do snmp-server group initial "" auth-no-priv read-view root write-view root notify-view root
				$do snmp-server group readgrp "" auth-no-priv read-view root notify-view root
				show snmp-server user|^$usmuser\b> $_ '%1'
				@if $_
					# This user already exists, so we delete it before re-creating it
					$do no snmp-server user $usmuser
				@endif
				@if $usmpriv
					show basic config |load-encryption-module : $usmpriv>$_ '%3'
					@if !$_
						$do load-encryption-module $usmpriv
					@endif
					$do snmp-server user $usmuser $usmauth $usmauthpwd $usmpriv $usmprivpwd
				@else
					$do snmp-server user $usmuser $usmauth $usmauthpwd
				@endif
				@if $access =~ /(write|rw)/
					$do snmp-server user $usmuser group initial
				@else
					$do snmp-server user $usmuser group readgrp
				@endif
			@else
				# 'BaystackERS'
				$do no password security
				$do snmp-server view root 1
				show snmp-server user|\b$usmuser\b> $_ '%3'
				@if $_
					# This user already exists, so we delete it before re-creating it
					$do no snmp-server user $usmuser
				@endif
				@if $usmpriv
					@if $access =~ /(write|rw)/
						$do snmp-server user $usmuser $usmauth $usmauthpwd $usmpriv $usmprivpwd read-view root write-view root notify-view root
					@else
						$do snmp-server user $usmuser $usmauth $usmauthpwd $usmpriv $usmprivpwd read-view root notify-view root
					@endif
				@else
					@if $access =~ /(write|rw)/
						$do snmp-server user $usmuser $usmauth $usmauthpwd read-view root write-view root notify-view root
					@else
						$do snmp-server user $usmuser $usmauth $usmauthpwd read-view root notify-view root
					@endif
				@endif
			@endif
			@vars prompt optional $more "Create additional users (y/n) ?"

		@else
			# SNMPv1v2
			# Clear all variables used below, in case we loop around
			$comm = ''
			$index = ''
			$secname = ''
			$access = ''

			# Request input for SNMPv1v2 community strings
			@vars prompt $comm "Please enter new community string :"
			@if $_family_type eq 'PassportERS'
				@vars prompt $index "Please enter index name for community string :"
			@endif
			@loop
				@vars prompt $access "Access rights for community string (read-write | read-only | rw | ro) :"
			@until $access =~ /(read|write|only)/ || $access =~ /^(rw|ro)$/

			# Configure
			@if $_family_type eq 'PassportERS'
				show snmp-server community|\b$index\b> $_ '%1'
				@if $_
					# This community string index already exists, so we delete it before re-creating it
					$do no snmp-server community-by-index $index
				@endif
				@if $access =~ /(write|rw)/
					$do snmp-server community $comm index $index secname initialview
				@else
					$do snmp-server community $comm index $index secname readview
				@endif
			@else
				# 'BaystackERS'
				@if $access =~ /(write|rw)/
					$do snmp-server community $comm rw
				@else
					$do snmp-server community $comm ro
				@endif
			@endif
			@vars prompt optional $more "Create additional community strings (y/n) ?"
		@endif
	@until "no" =~ /^$more/i
@endif

#
# Accept input and create new SNMP trap receivers
#
@vars prompt optional $_ "Create trap receivers (y/n) ?"
@if "yes" =~ /^$_/i
	@loop
		# Clear all variables used below, in case we loop around
		$traprcv = ''
		$usmuser = ''
		$level = ''
		$access = ''
		$commgroup = ''

		# Request input
		@vars prompt $traprcv "Please enter Trap receiver IP :"

		@if $snmpversion eq "v3"
			@if $_family_type eq 'PassportERS'
				show snmp-server user|0x\d > $users '%1'
			@else
				# 'BaystackERS'
				show snmp-server user|^User Name: > $users '%3'
			@endif
			@loop
				@vars prompt $usmuser "Please enter Usm user to associate with Trap receiver ($users) :"
				# Make sure this user exists
				@if $_family_type eq 'PassportERS'
					show snmp-server user|^$usmuser\b > $_ '%1'
				@else
					# 'BaystackERS'
					show snmp-server user|\b$usmuser\b > $_ '%3'
				@endif
				@if !$_
					@print "Usm user $usmuser does not exist"
				@endif
			@until $_
			# Now record user level as either noAuthNoPriv, authNoPriv or authPriv
			@if $_family_type eq 'PassportERS'
				show snmp-server user|^$usmuser\b > $_ '%3'
				@if $_ eq 'NO'
					$level = noAuthNoPriv
				@else
					show snmp-server user|^$usmuser\b > $_ '%4'
					@if $_ eq 'NO'
						$level = authNoPriv
					@else
						$level = authPriv
					@endif
				@endif
			@else
				# 'BaystackERS'
				show snmp-server user||$usmuser|^Auth > $_ '%3'
				@if $_ eq 'None'
					$level = no-auth
				@else
					show snmp-server user||$usmuser|^Priv > $_ '%3'
					@if $_ eq 'None'
						$level = auth
					@else
						$level = auth-priv
					@endif
				@endif
			@endif
		@else
			# SNMPv1v2
			@if $_family_type eq 'PassportERS'
				@loop
					@vars prompt $access "Access rights for trap receiver (read-write | read-only | rw | ro) :"
				@until $access =~ /(read|write|only)/ || $access =~ /^(rw|ro)$/
				@if $access =~ /(write|rw)/
					$commgroup = initialview
				@else
					$commgroup = readview
				@endif
			@else
				# 'BaystackERS'
				@vars prompt $commgroup "Please enter community string for Trap receiver:"
			@endif
		@endif

		# Configure
		@if $_family_type eq 'PassportERS'
			show snmp-server host|$traprcv:> $target '%1'
			@if $target
				# This trap receiver already exists, so we delete it before re-creating it
				show snmp-server host|snmpv,usm|$target> $model '%2'
				show snmp-server host|snmpv,usm|$target> $secname '%3'
				@if $model eq 'usm'
					$do no snmp-server host $traprcv v3 $secname
				@elsif $model eq 'snmpv2c'
					$do no snmp-server host $traprcv v2c $secname
				@else
					$do no snmp-server host $traprcv v1 $secname
				@endif
			@endif
			@if $snmpversion eq "v3"
				$do snmp-server host $traprcv $snmpversion $level $usmuser
			@else
				$do snmp-server host $traprcv $snmpversion $commgroup
			@endif
			show sys topology-ip|Clip-ip Set as Topology-ip > $clip '%6'
			@if $clip
				$do snmp-server force-trap-sender enable
				$do snmp-server force-iphdr-sender enable
				$do snmp-server sender-ip $traprcv $clip
			@endif
		@else
			# 'BaystackERS'
			show snmp-server host|^$traprcv\b> $target '%4'
			@if $target
				# This trap receiver already exists, so we delete it before re-creating it
				$do no snmp-server host $traprcv $target
			@endif
			@if $snmpversion eq "v3"
				$do snmp-server host $traprcv $snmpversion $level $usmuser
			@else
				$do snmp-server host $traprcv $commgroup
			@endif
		@endif
		@vars prompt optional $more "Create additional trap receivers (y/n) ?"

	@until "no" =~ /^$more/i
@endif

#
# Come out of config context
#
$do end

#
# Clear variables used in this script
#
@vars clear script

#
# Restore echo mode
#
@echo on
