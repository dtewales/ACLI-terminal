package Encoder;
my $Version = "0.03";

# EXOS config to json (c2j) encoder
# Ensure that j2c decoder is of same major version to ensure operating on same data schema

=ignore

################################################################################
#                                    SYNTAX                                    #
################################################################################
# Special directives:
#	SCHEMA_BEGIN			: Marks beginning of schema
#	SCHEMA_END			: Marks end of schema; all lines between SCHEMA_BEGIN and SCHEMA_END are treated like comments
# 	COMMENT_LINE = "<char>"		: Set the character which if seen at beginning of device config line makes the line a comment
#					  This is needed to skip comment lines when parsing a config
#	PORT_ALL = 1-<X>		: This sets what the highest number of expected ports is on a given slot, and is used to generate
#					  a port list when the device lists ports a <slot>/ALL, as BOSS does. If not set, 99 is assumed.
#	CLEAR_PERSIST_CONTEXT = "<cmd>" : Command which indicates exiting a configuration context, used to forget last persistent variable
#	DEFAULTS			: In the following lines provide space or tab indented json initialization values
#
# Then simply provide exhaustive list of lines expected to be found in config file, each line followed with the desired json encoding of data
# extracted from that line. Arguments withing the config line can be encoded as <arg>. The json encoding lines which follow must be space or
# tab indented. Or the first json line must begin with '{' and the last line must end with '}'.
# All json encodings supported. Hash of hashes, array of hashes and hashes of arrays...
#
# Example1 (pretty - no outer curlies):
# vlan create <vid> name <name type port <inst>
#	vlan: {
#		<vid>: {
#			name: <name>
#			instance: <inst>
#		}
#	}
#
# Example2 (pretty - with outer curlies):
# vlan create <vid> name <name type port <inst>
# {
#	vlan: {
#		<vid>: {
#			name: <name>
#			instance: <inst>
#		}
#	}
# }
#
# Example3 (compact):
# vlan create <vid> name <name type port <inst>
#	vlan: {	<vid>: { name: <name>, instance: <inst> } }
#
# Example4 (using array list with square brackets):
# ip name-server <ip>
#	dns: { server: [<ip>] }
#
# The json syntax is forgiving in that commas don't need to placed at end of lines.
# If the json syntax is found to be invalid an error will detail the line and why.
# If in doubt refer to JSON syntax.
# Make sure the schema is sensible; for example if the VLAN-id is used as the sub-key for the 'vlan' key, make sure that only VLAN-ids are used as
# sub-keys for the 'vlan' key. 
#
# Arguments <arg> syntax inside command line:
#	<name>			: Argument variable which will accepts any string
#	<name:1-10>		: Argument variable which will accept a number between 1 and 10
#	<name:1-10,>		: Argument variable which will accept a list and/or range of numbers where all numbers must be between 1 and 10
#	<name:value1,value2,etc>: Argument variable which will accept only discrete values: "value1" or "value2" or ect..
#	<name:*>		: Argument variable which will glob the rest of the command line
#	<port>			: When name = 'port', the argument variable only accepts a single valid port for the connected host (or in the defined input port range)
#	<ports>			: When name = 'ports', the argument variable accepts a list and/or range of valid ports for the connected host (or in the defined input port range)
#	<ip>			: When name = 'ip', the argument only accepts an IPv4 address
#	<ipv6>			: When name = 'ipv6', the argument only accepts an IPv6 address
#	<ip:mask>		: Accepts an IPv4/masklen address; can use <ip> for ip address, <mask> dotted mask, <masklen> mask bits 
#	<ipv6:mask>		: Accepts an IPv6/masklen address; can use <ip> for ip address, <mask> mask bits 
#
# Arguments <arg> syntax inside json lines:
# 	<var:%>			: true if set else false 
# 	<var:!%>		: false if set else true 
#	<var:abc=1,def=xyz,...>	: Mapping of argument values; e.g. if argument <var> has value 'abc' then encode in json as 1; etc..
#
# You can also reference data already in the data structure using the same json var syntax as in the decode.j2c file:
#	$<key1>{key2}[idx1]{key3}
#
# If an argument is a list of values, and the <arg> is used either as a json key [not array list], then as many keys will be expanded in the json encoding.
#
# For example this definition:
#
# vlan create <vids> type port <inst>
#	vlan: {	<vids>: { instance: <inst> } }
#
# When used to encode this config line: vlan create 1-3,5 type port 1
# Will result in this json encoding:
#	vlan: {
#		1: {
#			instance: 1
#		},
#		2: {
#			instance: 1
#		},
#		3: {
#			instance: 1
#		},
#		5: {
#			instance: 1
#		},
#	}
#
#
# Arguments <arg> hold their values only while processing the current config line. But it is also possible to hold argument values persistently.
# This is done by inserting a "!" like <!arg>. For example, if we wanted to json encode these lines:
#
# interface vlan 200
# ip address 10.0.200.1 255.255.255.0 1
# exit
#
# And assume that we wanted to store the IP/mask under the vlan key. This can be achieved with these definitions:
#
# interface vlan <!vid>
# ip address <ip> <mask> [<macoffset>]
# 	vlan: { <vid>: { ip: <ip>, mask: <mask> } }
# exit
#
# In practice the argument values are held in 2 separate tables, one persistent and one not.
# When a lookup is performed in the json encoding, first a lookup is performed in the non-persistent table, and if no value is found there, then a lookup
# is performed in the persistent table.
#
# Some configuration, using identical CLI commands, can apply to different contexts, for example global context or VLAN or Port or MLT context.
# In order to encode the config in the correct context, the definitions can require that a variable be set in the persistent table and also that that
# variable was the most recent variable set in the persistent table. For example:
#
# interface mlt 62
# isis enable
# exit
#
# -and-
#
# interface gigabitEthernet 1/2
# isis enable
# exit
#
# The "isis enable" command is the same, yet it applies to different configuration contexts, which will need to be encoded as follows.
# 
# interface mlt <!mltid>
# isis enable !mltid
# 	mlt: { <mltid> : {isis: { enable: true } } }
# exit
#
# interface GigabitEthernet <!ports>
# isis enable !ports
#	port: { <ports>: {isis: { enable: true } } }
# exit
#
# Specifying either "!mltid" or "!ports" as the last keyword of the "isis enable" command, allows each to be encoded as a different command
# with a different encoding. When the "isis enable" is encountered, the most recently set variable in the persistent table will determine which
# is used to encode the command.
#
# The very same problem, but using an example between port context and global context.
#
# lacp enable
#
# -and-
#
# interface GigabitEthernet 1/3
# lacp enable
# exit
#
# This time the "lacp enable" command applies to the global context as well as to port context. To differentiate between the two we can use use
# these definitions.
#
# lacp enable !
# 	lacp: { enable: true }
#
# interface GigabitEthernet <!ports>
# lacp enable !ports
# 	port: { <ports>: { lacp: { enable: true } } }
# exit
#
# By specifying the single "!" after that "lacp enable" command, we are making sure that the definition will only apply when no persistent
# variable is set. Normally global commands precede interface context config commands, but what would happen if that was not the case ?
# In order to clear the last persistent variable name, the following directive can be specified:
#
# CLEAR_PERSIST_CONTEXT = "exit"
#
# Now when the "exit" command is seen, the last stored persistent variable is cleared.
#
#
# If we wanted to encode data into a different part of the schema, we can back reference data already in the structure.
# For example, if we encoded these lines:
# interface vlan 190
# ip address 10.120.200.1 255.255.248.0 4
# [...later in same config...]
# ip dhcp-relay fwd-path 10.120.200.1 164.166.4.18 
# ip dhcp-relay fwd-path 10.120.200.1 164.166.4.18 mode dhcp
#
# We can use this encoding:
#
# interface vlan <!vid>
# ip address <ip> <mask> <macoffset:0-999>
#	vlan: { <vid>: { ip: <ip>, mask: <mask> } }
#	ip: { interface: { <ip>: { mask: <mask>, vlan: <vid> } } }
# exit
# ip dhcp-relay fwd-path <ip> <srv> [mode <mode>]
#	vlan: { $ip{interface}{<ip>}{vlan}: { dhcp-relay: { server: <srv>, mode: <mode> } } }
#
# Notice the use above of $ip{interface}{<ip>}{vlan}, which harks back to the data structure to retrieve the vlan-id for the IP address.
# This is handy if we want the vlan dhcp-relay info to be stored under the corresponding vlan key
#
#
# Best to avoid assigning key and value directly as this:
#
# banner <n> <line>
# 	system: { banner: { custom: { <n>: <line> } } }
#
# Because in the j2c file, variable $system{banner}{custom}{x} will only refer to the keys, not the values; one will have to use the more cryptic
# $system{banner}{custom}{x:v} to get to the values
#
# If possible, it is better to use a sub-hash like this:
#
# banner <n> <line>
#	system: { banner: { custom: { <n>: {line: <line> } } } }
#
# So that in j2c file the keys can be expressed as $system{banner}{custom}{x} and the values as $system{banner}{custom}{x}{line}
#
#
# Config lines which present no useful data to extract, can be included without any json encoding on following lines.
# This will ensure those lines do not throw errors when parsed. These lines can also set persistent <!arg> arguments.
#
#
################################################################################
#                                    SCHEMA                                    #
################################################################################
SCHEMA_BEGIN	# Schema is not actually read in by rosetta.pl

	Omitted, can be obtained with: rosetta.pl schema <this-file.c2j> [<out-schema-file>]

SCHEMA_END	# Only lines after this one will actially be read in 


################################################################################
#                                  DEFINITIONS                                 #
################################################################################

COMMENT_LINE = "#"
#DEFAULTS


# to be filled...


=cut

################################################################################
#                    PERL Post-Processing of Data Structure                    #
################################################################################
#
# Perl code can begin here.
# This code can be used to coerce the extracted data into the desired schema.
# Must be a subroutine named "run"
# This code is called after the all the data has been extracted from the original config file
# and it allows us to alter the structure of the data to comply with the data schema we are aiming for
# Note that keys containing '-' character must be quoted...

use Data::Dumper;
use Storable 'dclone';

sub run { # Function must be named "run" and will be executed as Encoder::run
	my $data = shift; # The extracted data structure is passed as a hash reference


}

1;

__END__
