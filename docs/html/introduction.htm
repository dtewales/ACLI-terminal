<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
<Title>Introduction</Title>
</HEAD>
<BODY>
<h1>Introduction</h1>
<p>Active CLI (ACLI) is an SSH, Telnet and Serial Port terminal with advanced features for interacting with Extreme Networking products.</p>
<p>The main features are:</p>
<ul>
	<li>Grep capability on output of any command; works properly with context-based switch configuration; simple grep, advanced grep, negative grep and no limit on chain of grep sequences (always better than switch own grep!)</li>
	<li>Alias capability: define aliases for the commands you use most of the time; comes with many pre-defined in <i>acli.alias</i> file which you can edit, or you can place yours in <i>merge.alias</i></li>
	<li>Run multiple terminal sessions, and tie them together with sockets; issue commands in one and they get executed in all others as well</li>
	<li>Output redirect to, and input source from files directly from your local file system (no more hassle of getting the files to/from the switch or the inconvenience of Stackables which have no file system)</li>
	<li>Set variables per device; capture port lists/ranges from output; embed same variables in any commands you issue; save variables and have them automatically reloaded when connecting to same switch</li>
	<li>Enhanced history of commands (no more pathetic 15 commands of ERS Stackable history); because of alias and variable support, 2 histories are held: commands typed by user & commands actually sent to switch</li>
	<li>Localized more paging, makes session seem more responsive on slow connections/switches; terminal obtains full output in the background while user pages through output at a slower rate</li>
	<li>Unlimited commands can be copy-pasted into terminal; each line is fed at every prompt; terminal is capable of making difference between user typing and user pasting</li>
	<li>When pasting or sourcing, commands which prompt for confirmation (y/n) are automatically confirmed without having to remember to add a 'y' + Carriage return to CLI script</li>
	<li>When pasting or sourcing, if an error is encountered, sourcing will stop there; + ability to resume from where we left, as pasting/sourcing buffer can be recalled with @resume command</li>
	<li>Ability to repeat a command at configurable regular intervals, indefinitely or until user tries to interact again with CLI session</li>
	<li>Ability to repeat a command and replace fields within it at each iteration with list or range of values</li>
	<li>Ability to issue multiple commands on same line separated by semi-colon ';', which allows above functions as well as alias to be used to send multiple commands to the switch</li>
	<li>Automatically unwraps annoying wrapped long lines from Stackable/ISW show running-config and log file</li>
	<li>Suppresses annoying escape characters from stackable login; so that when capturing to log file, the file is readable afterwards (Stackable banner is reformatted and maintained)</li>
	<li>Ability to maintain a cache of past terminal server connections for ease of recall by mapping IP & TCP port to Switch name, model & MAC address</li>
	<li>The same grep capability can be leveraged on offline config files by invoking the acli command with <i>-g</i> switch to a single file or file wildcard or piping to <i>acli -g</i></li>
	<li>For SSH publickey authentication, ability to view installed public keys on switch as well as plant own public key in the right file in the right format for the right user access</li>
	<li>Do not get disconnected by switch after a few minutes inactivity; ACLI terminal holds its own session timer and will generate regular keep alives to hold the session up until its own session timer expires</li>
	<li>Ability to highlight (e.g. in red bold) any string or pattern in output stream; handy for inspecting large log files for certain keywords</li>
	<li>Ability to modify and/or recolour selected output from device using sed patterns which can be defined in an offline file</li>
	<li>Scripting support with the ability to use control structures, error detection, user input, and controlled output</li>
	<li>Dictionary support, allowing online translation from loaded dictionary CLI flavour into syntax of connected device</li>
	<li>Ability to push(put) or pull(get) with FTP or SFTP one or many files from one or many switches simultaneously using supplied aftp command tool</li>
	<li>Ability to launch many ACLI sessions from a command line using IP/hostname lists, or from a hosts file, or from a batch file; using the ACLI GUI Launcher tool</li>
	<li>Ability to extract device information from XMC via GraphQl API, in order to easily launch many ACLI sessions against XMC discovered devices; using the XMC ACLI Launcher tool</li>
</ul>
<p>ACLI Terminal is written in Perl and is distributed with ConsoleZ (FreeWare) which is an improved DOS box window for use on Microsoft Windows.</p>
<p>The ACLI installer delivers a complete package installation for Microsoft Windows, which includes all the necessary Perl files and modules as well as ConsoleZ executable.</p>
<p>ACLI will also work on Linux and Apple MAC OS, but the author does not currently distribute a distribution package for these (so one would have to install all the necessary Perl modules manually).</p>
</BODY>
</HTML>
