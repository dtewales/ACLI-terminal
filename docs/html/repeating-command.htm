<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
<Title>Repeating a Command</Title>
</HEAD>
<BODY>
<h1>Repeating a Command</h1>

<p>There are two ways to repeat a command with the ACLI terminal, in interactive mode.</p>
<p>A command can be repeated indefinietly by simply appending to it the <i>'@'</i> character followed by an optional number representing the delay seconds to wait between every command execution. If no optional number of seconds is provided, then the commands are repeated as fast as possible (i.e. as soon as a new CLI prompt is received from the connected host). To break out of the loop simply hit any key on the terminal.</p>
<ul>
	<li>&lt;CLI-command-to-repeat&gt; <b>@ &lt;interval-seconds&gt;</b></li>
</ul>
<pre>
	VSP-8284XSQ:1#% show clock @5
	Mon Jul 30 13:36:43 2018 UTC


	Mon Jul 30 13:36:47 2018 UTC


	Mon Jul 30 13:36:52 2018 UTC
</pre>
<p>This will also work with multiple commands separated by semicolons. All the commands will be repeated.</p>

<p>A command can also be repeated for a precise number of times by appending to it the <i>'&'</i> character followed by the desired iteration sequence. The value of the iteration sequence can also be embedded in the command being executed, using the same formatting as Perls' <i>sprintf()</i>. The sequence syntax can take a number of formats:</p>
<ul>
	<li>&lt;CLI-command-to-repeat-with-optional-embedded-%s&gt; <b>&&lt;start&&gt;..&&lt;end&gt;[:&&lt;step&gt;] ...</b></li>
	<li>&lt;CLI-command-to-repeat-with-optional-embedded-%s&gt; <b>&[']&lt;comma-separated-list-or-port-range&gt; ...</b></li>
</ul>
<p>This will also work with multiple commands separated by semicolons. All the commands will be repeated.</p>
<p>A few examples will help illustrate; the first exaple creates 9 mlt instances, numbered 1..9:</p>
<pre>
	VSP-8284XSQ:1(config)#% mlt %s &1..9
	VSP-8284XSQ:1(config)#% mlt 1
	VSP-8284XSQ:1(config)#% mlt 2
	VSP-8284XSQ:1(config)#% mlt 3
	VSP-8284XSQ:1(config)#% mlt 4
	VSP-8284XSQ:1(config)#% mlt 5
	VSP-8284XSQ:1(config)#% mlt 6
	VSP-8284XSQ:1(config)#% mlt 7
	VSP-8284XSQ:1(config)#% mlt 8
	VSP-8284XSQ:1(config)#% mlt 9
	VSP-8284XSQ:1(config)#%
</pre>
<p>The next example also creates 9 mlts, but their ids are now 10,20,30...90:</p>
<pre>
	VSP-8284XSQ:1(config)#% mlt %s &10..90:10
	VSP-8284XSQ:1(config)#% mlt 10
	VSP-8284XSQ:1(config)#% mlt 20
	VSP-8284XSQ:1(config)#% mlt 30
	VSP-8284XSQ:1(config)#% mlt 40
	VSP-8284XSQ:1(config)#% mlt 50
	VSP-8284XSQ:1(config)#% mlt 60
	VSP-8284XSQ:1(config)#% mlt 70
	VSP-8284XSQ:1(config)#% mlt 80
	VSP-8284XSQ:1(config)#% mlt 90
	VSP-8284XSQ:1(config)#%
</pre>
<p>If we now wanted to delete all these mlts, we could simply use a list:</p>
<pre>
	VSP-8284XSQ:1(config)#% no mlt %s &'1-10,20,30,40,50,60,70,80,90
	VSP-8284XSQ:1(config)#% no mlt 1
	VSP-8284XSQ:1(config)#% no mlt 2
	VSP-8284XSQ:1(config)#% no mlt 3
	VSP-8284XSQ:1(config)#% no mlt 4
	VSP-8284XSQ:1(config)#% no mlt 5
	VSP-8284XSQ:1(config)#% no mlt 6
	VSP-8284XSQ:1(config)#% no mlt 7
	VSP-8284XSQ:1(config)#% no mlt 8
	VSP-8284XSQ:1(config)#% no mlt 9
	VSP-8284XSQ:1(config)#% no mlt 10
	VSP-8284XSQ:1(config)#% no mlt 20
	VSP-8284XSQ:1(config)#% no mlt 30
	VSP-8284XSQ:1(config)#% no mlt 40
	VSP-8284XSQ:1(config)#% no mlt 50
	VSP-8284XSQ:1(config)#% no mlt 60
	VSP-8284XSQ:1(config)#% no mlt 70
	VSP-8284XSQ:1(config)#% no mlt 80
	VSP-8284XSQ:1(config)#% no mlt 90
	VSP-8284XSQ:1(config)#%
</pre>
<p>Note that since our list includes a range, we must add the ' character to expand the 1-10 range into a list as well</p>
<p>Or if we had captured that list in a variable $mltids:</p>
<pre>
	VSP-8284XSQ:1(config)#% $mltids
	
	$mltids     = 1-10,20,30,40,50,60,70,80,90
	
	VSP-8284XSQ:1(config)#% no mlt %s &'$mltids
	                  vars% no mlt %s &'1-10,20,30,40,50,60,70,80,90
	VSP-8284XSQ:1(config)#% no mlt 1
	VSP-8284XSQ:1(config)#% no mlt 2
	VSP-8284XSQ:1(config)#% no mlt 3
	VSP-8284XSQ:1(config)#% no mlt 4
	VSP-8284XSQ:1(config)#% no mlt 5
	VSP-8284XSQ:1(config)#% no mlt 6
	VSP-8284XSQ:1(config)#% no mlt 7
	VSP-8284XSQ:1(config)#% no mlt 8
	VSP-8284XSQ:1(config)#% no mlt 9
	VSP-8284XSQ:1(config)#% no mlt 10
	VSP-8284XSQ:1(config)#% no mlt 20
	VSP-8284XSQ:1(config)#% no mlt 30
	VSP-8284XSQ:1(config)#% no mlt 40
	VSP-8284XSQ:1(config)#% no mlt 50
	VSP-8284XSQ:1(config)#% no mlt 60
	VSP-8284XSQ:1(config)#% no mlt 70
	VSP-8284XSQ:1(config)#% no mlt 80
	VSP-8284XSQ:1(config)#% no mlt 90
	VSP-8284XSQ:1(config)#%
</pre>
<p>Again, when dereferencing a $variable, which might produce ranges, we need to either place the ' character after the '&' operator, or alternatively the variable can be dereferenced in raw list mode with $'variable:</p>
<pre>
	VSP-8284XSQ:1(config)#% no mlt %s &$'mltids
	                  vars% no mlt %s &1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90
	VSP-8284XSQ:1(config)#% no mlt 1
	VSP-8284XSQ:1(config)#% no mlt 2
	VSP-8284XSQ:1(config)#% no mlt 3
	VSP-8284XSQ:1(config)#% no mlt 4
	VSP-8284XSQ:1(config)#% no mlt 5
	VSP-8284XSQ:1(config)#% no mlt 6
	VSP-8284XSQ:1(config)#% no mlt 7
	VSP-8284XSQ:1(config)#% no mlt 8
	VSP-8284XSQ:1(config)#% no mlt 9
	VSP-8284XSQ:1(config)#% no mlt 10
	VSP-8284XSQ:1(config)#% no mlt 20
	VSP-8284XSQ:1(config)#% no mlt 30
	VSP-8284XSQ:1(config)#% no mlt 40
	VSP-8284XSQ:1(config)#% no mlt 50
	VSP-8284XSQ:1(config)#% no mlt 60
	VSP-8284XSQ:1(config)#% no mlt 70
	VSP-8284XSQ:1(config)#% no mlt 80
	VSP-8284XSQ:1(config)#% no mlt 90
	VSP-8284XSQ:1(config)#%
</pre>
<p>Multiple ranges can also be specified, of either type, separated by space; however in this case the ranges need to be consistent (i.e. have the same number of iterations) otherwise the command will not be accepted</p>
<pre>
	VSP-8284XSQ:1(config)#% mlt %s member %s &1..9 1/1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9
	VSP-8284XSQ:1(config)#% mlt 1 member 1/1
	VSP-8284XSQ:1(config)#% mlt 2 member 1/2
	VSP-8284XSQ:1(config)#% mlt 3 member 1/3
	VSP-8284XSQ:1(config)#% mlt 4 member 1/4
	VSP-8284XSQ:1(config)#% mlt 5 member 1/5
	VSP-8284XSQ:1(config)#% mlt 6 member 1/6
	VSP-8284XSQ:1(config)#% mlt 7 member 1/7
	VSP-8284XSQ:1(config)#% mlt 8 member 1/8
	VSP-8284XSQ:1(config)#% mlt 9 member 1/9
	VSP-8284XSQ:1(config)#%
</pre>
<p>In all the above examples, the values are dereferenced as a simple text string (<i>%s</i>) in the command string. However any of Perl's <i>sprintf()</i> format conversions are accepted: <a href=https://perldoc.perl.org/functions/sprintf.html>https://perldoc.perl.org/functions/sprintf.html</a></p>
<p>The repeat command functions will not only work on single CLI commands but can also work on multiple commands, if these are concatenated with semi-colon ';'. In the above example, mlt port membership is set across 9 separate mlts; however it assumed that the mlts were already created. If one wanted to create the mlts and assign the port memebership at the same time, one could do the following:</p>
<pre>
	VSP-8284XSQ:1(config)#% mlt %s; mlt %s member %s; &1..9 1..9 1/1,1/2,1/3,1/4,1/5,1/6,1/7,1/8,1/9
	VSP-8284XSQ:1(config)#% mlt 1; mlt 1 member 1/1
	VSP-8284XSQ:1(config)#% mlt 1
	VSP-8284XSQ:1(config)#% mlt 1 member 1/1
	VSP-8284XSQ:1(config)#% mlt 2; mlt 2 member 1/2
	VSP-8284XSQ:1(config)#% mlt 2
	VSP-8284XSQ:1(config)#% mlt 2 member 1/2
	VSP-8284XSQ:1(config)#% mlt 3; mlt 3 member 1/3
	VSP-8284XSQ:1(config)#% mlt 3
	VSP-8284XSQ:1(config)#% mlt 3 member 1/3
	VSP-8284XSQ:1(config)#% mlt 4; mlt 4 member 1/4
	VSP-8284XSQ:1(config)#% mlt 4
	VSP-8284XSQ:1(config)#% mlt 4 member 1/4
	VSP-8284XSQ:1(config)#% mlt 5; mlt 5 member 1/5
	VSP-8284XSQ:1(config)#% mlt 5
	VSP-8284XSQ:1(config)#% mlt 5 member 1/5
	VSP-8284XSQ:1(config)#% mlt 6; mlt 6 member 1/6
	VSP-8284XSQ:1(config)#% mlt 6
	VSP-8284XSQ:1(config)#% mlt 6 member 1/6
	VSP-8284XSQ:1(config)#% mlt 7; mlt 7 member 1/7
	VSP-8284XSQ:1(config)#% mlt 7
	VSP-8284XSQ:1(config)#% mlt 7 member 1/7
	VSP-8284XSQ:1(config)#% mlt 8; mlt 8 member 1/8
	VSP-8284XSQ:1(config)#% mlt 8
	VSP-8284XSQ:1(config)#% mlt 8 member 1/8
	VSP-8284XSQ:1(config)#% mlt 9; mlt 9 member 1/9
	VSP-8284XSQ:1(config)#% mlt 9
	VSP-8284XSQ:1(config)#% mlt 9 member 1/9
	VSP-8284XSQ:1(config)#%
	VSP-8284XSQ:1(config)#% show mlt
	====================================================================================================
	                                    Mlt Info
	====================================================================================================
	                        PORT    MLT   MLT        PORT         VLAN
	MLTID IFINDEX NAME      TYPE   ADMIN CURRENT    MEMBERS       IDS
	----------------------------------------------------------------------------------------------------
	1   6144  MLT-1        access  norm   norm     1/1
	2   6145  MLT-2        access  norm   norm     1/2
	3   6146  MLT-3        access  norm   norm     1/3
	4   6147  MLT-4        access  norm   norm     1/4
	5   6148  MLT-5        access  norm   norm     1/5
	6   6149  MLT-6        access  norm   norm     1/6
	7   6150  MLT-7        access  norm   norm     1/7
	8   6151  MLT-8        access  norm   norm     1/8
	9   6152  MLT-9        access  norm   norm     1/9
	
	All 9 out of 9 Total Num of mlt displayed
</pre>
<p>The fact that the repeat operator does not expand ranges (without the ' character) comes in useful with with the SLX product family where CLI commands using port ranges are only allowed as long as the ranges do not span slots. The SLX-9850 can have multiple slots. Given a port selection spanning multiple slots, unlike on other Extreme switches, it would not be possible to perform a configuration across them all at once:</p>
<pre>
	PE1-9850(config)#% $ports
	
	$ports        = 1/1-6,1/8-13,1/15-20,1/41-46,1/48-53,1/55-60,4/1-72
	
	PE1-9850(config)#% ife $ports
	             vars% ife 1/1-6,1/8-13,1/15-20,1/41-46,1/48-53,1/55-60,4/1-72
	            alias% interface Ethernet 1/1-6,1/8-13,1/15-20,1/41-46,1/48-53,1/55-60,4/1-72
	-------------------------------------^
	syntax error: "1/1-6,1/8-13,1/15-20,1/41-46,1/48-53,1/55-60,4/1-72" has a bad length/size.
	PE1-9850(config)#%
</pre>
<p>Whereas using the repeat operator (without the ' character) yields the most efficient command sequence to configure all the ports:</p>
<pre>
	PE1-9850(config)#% ife %s; no shut; exit; &$ports
	             vars% ife %s; no shut; exit; &1/1-6,1/8-13,1/15-20,1/41-46,1/48-53,1/55-60,4/1-72
	PE1-9850(config)#% ife 1/1-6; no shut; exit
	PE1-9850(config)#% ife 1/1-6
	            alias% interface Ethernet 1/1-6
	PE1-9850(conf-if-eth-1/1-6)#% no shut
	PE1-9850(conf-if-eth-1/1-6)#% exit
	PE1-9850(config)#% ife 1/8-13; no shut; exit
	PE1-9850(config)#% ife 1/8-13
	            alias% interface Ethernet 1/8-13
	PE1-9850(conf-if-eth-1/8-13)#% no shut
	PE1-9850(conf-if-eth-1/8-13)#% exit
	PE1-9850(config)#% ife 1/15-20; no shut; exit
	PE1-9850(config)#% ife 1/15-20
	            alias% interface Ethernet 1/15-20
	PE1-9850(conf-if-eth-1/15-20)#% no shut
	PE1-9850(conf-if-eth-1/15-20)#% exit
	PE1-9850(config)#% ife 1/41-46; no shut; exit
	PE1-9850(config)#% ife 1/41-46
	            alias% interface Ethernet 1/41-46
	PE1-9850(conf-if-eth-1/41-46)#% no shut
	PE1-9850(conf-if-eth-1/41-46)#% exit
	PE1-9850(config)#% ife 1/48-53; no shut; exit
	PE1-9850(config)#% ife 1/48-53
	            alias% interface Ethernet 1/48-53
	PE1-9850(conf-if-eth-1/48-53)#% no shut
	PE1-9850(conf-if-eth-1/48-53)#% exit
	PE1-9850(config)#% ife 1/55-60; no shut; exit
	PE1-9850(config)#% ife 1/55-60
	            alias% interface Ethernet 1/55-60
	PE1-9850(conf-if-eth-1/55-60)#% no shut
	PE1-9850(conf-if-eth-1/55-60)#% exit
	PE1-9850(config)#% ife 4/1-72; no shut; exit
	PE1-9850(config)#% ife 4/1-72
	            alias% interface Ethernet 4/1-72
	PE1-9850(conf-if-eth-4/1-72)#% no shut
	PE1-9850(conf-if-eth-4/1-72)#% exit
	PE1-9850(config)#%
</pre>
<p>Note that using &' would have also worked, but would have resulted in "no shut" being executed individually on every single port after expanding the port ranges, which would have been less efficient. Also note that this example only works if the ACLI terminal portrange spanslot mode is disabled; see ACLI Control "terminal portrange spanslots" and/or the 'default_port_range_mode' key in <i>acli.ini</i></p>
</BODY>
</HTML>
