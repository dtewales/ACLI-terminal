<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
	<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
	<Title>Grep</Title>
</HEAD>
<BODY>
<h1>Grep</h1>
<p>Grep is the ability to filter output lines based on matching a string or pattern within them. Grep capability is one of the major features of the ACLI terminal. In interactive mode any CLI command can be followed by any number of grep strings and of various types. The grep strings are processed locally by the ACLI terminal and are stripped off the CLI command before it is sent to the connected host. When the host sends the output back, the ACLI terminal filters that output based on what grep patterns had been defined by the user. ACLI supports these four basic grep types:</p>
<pre>
	&lt;CLI command&gt; |  &lt;grep string&gt; [-s]                 simple line grep
	&lt;CLI command&gt; ! [&lt;grep string&gt; [-s]]                simple line negative grep
	&lt;CLI command&gt; ^ &lt;match string&gt; [-s]                 highlight matched string in output stream
	&lt;CLI command&gt; || &lt;grep string&gt; [-s]                 advanced grep
	&lt;CLI command&gt; !! &lt;grep string&gt; [-s]                 advanced negative grep
</pre>
<p>Where the optional <i>-s</i> switch makes the grep string provided case sensitive. Most of the time when filtering switch output with grep we care little about case sensitivity, so the ACLI terminal defaults to a case insensitive grep, and offers the optional <i>-s</i> switch for the less frequent case sensitive greps.</p>



<div class="section" id="Simple Grep">
<h2>Simple Grep</h2>
<p>Simple grep is about only displaying lines in which the grep string or pattern is found.</p>
<pre>
	VSP-8284XSQ:1#% show running-config | ssh
	boot config flags sshd
	# SSH CONFIGURATION
	ssh
	
	VSP-8284XSQ:1#%
</pre>
<p>Multiple grep patterns can be provided and separated by comma; this acts as a logical OR on those patterns, if any of them is matched, then the lines are displayed.</p>
<pre>
	VSP-8284XSQ:1#% show running-config | ssh,telnet
	boot config flags sshd
	boot config flags telnetd
	# SSH CONFIGURATION
	ssh
	
	VSP-8284XSQ:1#%
</pre>
<p>You can also concatenate multiple grep strings to the same CLI command; this acts as a logical AND on those patterns, only lines matching all the grep patterns will be displayed. The ACLI grep implementation does not impose any limit on how many grep strings are concatenated.</p>
<pre>
	VSP-8284XSQ:1#% show running-config | ssh,telnet | flag
	boot config flags sshd
	boot config flags telnetd
	
	VSP-8284XSQ:1#%
</pre>
</div>



<div class="section" id="Simple Negative Grep">
<h2>Simple Negative Grep</h2>
<p>Simple negative grep is about only displaying lines in which the grep string or pattern is not found. Negative grep usually makes more sense when concatenated with positive grep so as to remove some unwanted output from the output produced from the previous grep function.</p>
<pre>
	VSP-8284XSQ:1#% show running-config | ssh,telnet ! ^#
	boot config flags sshd
	boot config flags telnetd
	ssh
	
	VSP-8284XSQ:1#%
</pre>
<p>Notice that we used the negative grep to remove the banner line beginning with '#'. Also notice that we were able to concatenate a positive grep with a negative grep in the above example. The ACLI grep implementation allows any grep type (simple/advanced, positive/negative) to be concatenated as many times as desired.</p>
<p>A special case of negative grep is when it used without any grep string(i.e. just a trailing '!'). In this case it will remove all empty lines from the output. This form of negative grep can only be combined with other greps if it is the rightmost.</p>
<pre>
	VSP-8284XSQ:1#% show qos ingressmap 1p
	====================================================================================================
	                     Qos Ingress IEEE 1P to QOS-Level Map
	====================================================================================================
	IEEE1P          QOSLEVEL
	----------------------------------------------------------------------------------------------------
	0               1
	
	1               0
	
	2               2
	
	3               3
	
	4               4
	
	5               5
	
	6               6
	
	7               7
	
	VSP-8284XSQ:1#% show qos ingressmap 1p !
	====================================================================================================
	                     Qos Ingress IEEE 1P to QOS-Level Map
	====================================================================================================
	IEEE1P          QOSLEVEL
	----------------------------------------------------------------------------------------------------
	0               1
	1               0
	2               2
	3               3
	4               4
	5               5
	6               6
	7               7
	
	VSP-8284XSQ:1#%
</pre>
</div>



<div class="section" id="Highlight">
<h2>Highlight</h2>
<p>The highlight function with '^' is already covered in a separate section. It is also included here since it is extremely similar to the simple and negative greps in the way it works and behaves in exactly the same way with regards to all of the considerations covered in the next section. The only difference between highlight and simple greps is that the highlight will not filter out any lines and instead will simply apply the highlight where the grep string (or match string in this case) matches. The highlight function can also be concatenated with grep functions on the only condition that there can be only one highlight function and it needs to be the very last in the concatenation.</p>
</div>



<div class="section" id="Considerations around ACLI grep">
<h2>Considerations around ACLI grep</h2>
<p>Note that spaces before/after the grep pipe '|' / bang '!' characters are optional and can be omitted. Also any spaces before or after the provided grep string/pattern are automatically removed (only spaces inside the grep string are preserved). If you need to include leading or trailing spaces in the grep pattern, simply enclose the grep pattern in quotes (single or double quotes).</p>
<pre>
	VSP-8284XSQ:1#% show running-config|ssh,telnet!^#
	boot config flags sshd
	boot config flags telnetd
	ssh
	
	VSP-8284XSQ:1#%
</pre>
<pre>
	VSP-8284XSQ:1#% show interfaces gigabitEthernet interface |  up
	1/1      192   10GbNone         true  false    1950  00:51:00:ca:e0:00 up     up
	1/2      193   10GbNone         true  false    1950  00:51:00:ca:e0:01 up     up
	1/3      194   10GbNone         true  false    1950  00:51:00:ca:e0:02 up     up
	1/4      195   10GbNone         true  false    1950  00:51:00:ca:e0:03 up     down
	VSP-8284XSQ:1#%
	VSP-8284XSQ:1#% show interfaces gigabitEthernet interface | "  up"
	1/1      192   10GbNone         true  false    1950  00:51:00:ca:e0:00 up     up
	1/2      193   10GbNone         true  false    1950  00:51:00:ca:e0:01 up     up
	1/3      194   10GbNone         true  false    1950  00:51:00:ca:e0:02 up     up
	VSP-8284XSQ:1#%
</pre>
<p>The last example shows how to specify a grep pattern of <i>"  up"</i> with 2 preceding spaces such that we can filter on the last column containing 'up' and not the penultimate column. Or again, we could use negative grep to achieve the same:</p>
<pre>
	VSP-8284XSQ:1#% show interfaces gigabitEthernet interface | up ! down
	1/1      192   10GbNone         true  false    1950  00:51:00:ca:e0:00 up     up
	1/2      193   10GbNone         true  false    1950  00:51:00:ca:e0:01 up     up
	1/3      194   10GbNone         true  false    1950  00:51:00:ca:e0:02 up     up
	VSP-8284XSQ:1#%
</pre>
<p>ACLI's grep takes some special consideration whenever the grep string is a number or an Ethernet port number (in any of the possible formats slot/port, slot/port/channel, slot:port). It would be particularly annoying if having requested a grep of '2' we got back lines with '12', '22', etc..; likewise, if our grep string is '1/1' we are unlikely to want to see lines referring to ports 1/10, 1/11, etc... So the ACLI grep is being a bit more clever when it is given a number or a port number:</p>
<pre>
	EXOS-VM.19 #% if | 2
	         alias% show ports information | 2
	2         Dm------e--fMB----- ready     - / -   1   1    1     1  9216 none
	EXOS-VM.19 #%
</pre>
<p>The example above might not seem that obvious, so we will just show what you would get if using the switch's own pipe include grep function (i.e. the switch CLI is doing the grep, not the ACLI terminal):</p>
<pre>
	EXOS-VM.19 #% show ports information \| include 2
	1         Em------e--fMB----- active    - / -   1   1    1     1  9216 none
	2         Dm------e--fMB----- ready     - / -   1   1    1     1  9216 none
	3         Dm------e--fMB----- ready     - / -   1   1    1     1  9216 none
	EXOS-VM.20 #%
</pre>
<p>Note that the switch CLI is hopeless and shows all 3 ports (XOS VM used here) since a '2' appears in the MTU value '9216'. Note as well that if you really wanted to use the switch CLI to perform the grep, you need to back slash the pipe '|' character (or else toggle into ACLI transparent mode with CTRL-T), otherwise ACLI will perform the grep instead.</p>
<p>In the unlikely case where you would actually like ACLI's grep to do a raw and stupid grep (like the switch CLI does) then all you need to do is to place quotes around the number, so ACLI will treat the grep string as text:</p>
<pre>
	EXOS-VM.21 #% if | "2"
	         alias% show ports information | "2"
	1         Em------e--fMB----- active    - / -   1   1    1     1  9216 none
	2         Dm------e--fMB----- ready     - / -   1   1    1     1  9216 none
	3         Dm------e--fMB----- ready     - / -   1   1    1     1  9216 none
	EXOS-VM.21 #%
</pre>
<p>We will just demonstrate the same point using port numbers in the slot/port format, using VOSS this time:</p>
<pre>
	VSP-8284XSQ:1#% if | 1/1
	         alias% show interfaces gigabitEthernet interface!!locked | 1/1
	1/1      192   10GbNone         true  false    1950  00:51:00:ca:e0:00 up     up
	VSP-8284XSQ:1#%
</pre>
<p>Only a line with port 1/1 is shown. Yet if we tried to use VOSS's own CLI grep function we get hopeless output:</p>
<pre>
	VSP-8284XSQ:1#% show interfaces gigabitEthernet interface \| include 1/1
	1/1      192   10GbNone         true  false    1950  00:51:00:ca:e0:00 up     up
	1/10     201   10GbNone         true  false    1950  00:51:00:ca:e0:09 down   down
	1/11     202   10GbNone         true  false    1950  00:51:00:ca:e0:0a down   down
	1/12     203   10GbNone         true  false    1950  00:51:00:ca:e0:0b down   down
	1/13     204   10GbNone         true  false    1950  00:51:00:ca:e0:0c down   down
	1/14     205   10GbNone         true  false    1950  00:51:00:ca:e0:0d down   down
	1/15     206   10GbNone         true  false    1950  00:51:00:ca:e0:0e down   down
	1/16     207   10GbNone         true  false    1950  00:51:00:ca:e0:0f down   down
	1/17     208   10GbNone         true  false    1950  00:51:00:ca:e0:10 down   down
	1/18     209   10GbNone         true  false    1950  00:51:00:ca:e0:11 down   down
	1/19     210   10GbNone         true  false    1950  00:51:00:ca:e0:12 down   down
	VSP-8284XSQ:1#%
</pre>
<p>And if we wanted the same hopeless output with ACLI's grep, then we could simply put quotes around our port number:</p>
<pre>
	VSP-8284XSQ:1#% if | "1/1"
	         alias% show interfaces gigabitEthernet interface!!locked | "1/1"
	1/1      192   10GbNone         true  false    1950  00:51:00:ca:e0:00 up     up
	1/10     201   10GbNone         true  false    1950  00:51:00:ca:e0:09 down   down
	1/11     202   10GbNone         true  false    1950  00:51:00:ca:e0:0a down   down
	1/12     203   10GbNone         true  false    1950  00:51:00:ca:e0:0b down   down
	1/13     204   10GbNone         true  false    1950  00:51:00:ca:e0:0c down   down
	1/14     205   10GbNone         true  false    1950  00:51:00:ca:e0:0d down   down
	1/15     206   10GbNone         true  false    1950  00:51:00:ca:e0:0e down   down
	1/16     207   10GbNone         true  false    1950  00:51:00:ca:e0:0f down   down
	1/17     208   10GbNone         true  false    1950  00:51:00:ca:e0:10 down   down
	1/18     209   10GbNone         true  false    1950  00:51:00:ca:e0:11 down   down
	1/19     210   10GbNone         true  false    1950  00:51:00:ca:e0:12 down   down
	VSP-8284XSQ:1#%
</pre>
<p>As well as properly dealing with numbers and port numbers, ACLI's grep is also able to take numerical or port ranges as search string and to find all hits for all numbers/ports in the range.</p>
<pre>
	EXOS-VM.21 #% if || 1-3
	         alias% show ports information || 1-3
	Port      Flags               Link      ELSM Link Num  Num   Num Jumbo QOS     Load
	                              State     /OAM  UPS STP VLAN Proto  Size profile Master
	=====================================================================================
	1         Em------e--fMB----- active    - / -   1   1    1     1  9216 none
	2         Dm------e--fMB----- ready     - / -   1   1    1     1  9216 none
	3         Dm------e--fMB----- ready     - / -   1   1    1     1  9216 none
	=====================================================================================
	EXOS-VM.21 #%
</pre>
<p>Note that port 2 was included in the grep output.</p>
<pre>
	VSP-8284XSQ:1#% if | 1/1-1/5
	         alias% show interfaces gigabitEthernet interface!!locked | 1/1-1/5
	1/1      192   10GbNone         true  false    1950  00:51:00:ca:e0:00 up     up
	1/2      193   10GbNone         true  false    1950  00:51:00:ca:e0:01 up     up
	1/3      194   10GbNone         true  false    1950  00:51:00:ca:e0:02 up     up
	1/4      195   10GbNone         true  false    1950  00:51:00:ca:e0:03 up     down
	1/5      196   10GbNone         true  false    1950  00:51:00:ca:e0:04 down   down
	VSP-8284XSQ:1#%
</pre>
<p>Note that ports 1/2,1/3 & 1/4 were included.</p>

<p>All the points covered in this section are also applicable to the advanced grep variants which will be covered below.</p>
</div>



<div class="section" id="Use of regular expressions">
<h2>Use of regular expressions</h2>
<p>In one of the previous examples, the caret sign '^' was used as the standard regular expression for matching text anchored at the beginning. ACLI grep supports the majority of Perl's regular expressions, though for some the character involved is overloaded by ACLI so might need back slashing; follows a list of the most commonly used.</p>
<ul>
	<li><b>Metacharacters</b>
	<ul>
		<li><b>^</b> : Match at the beginning of the line. The '^' character has to appear as the first character after the grep pipe '|' or bang '!' grep identifier (otherwise it will be interpreted as ACLI highlight feature)</li>
		<li><b>$</b> : Match at the end of the line. The '$' character has to appear as the last character of the grep string/patterns, not followed by any other character (otherwise ACLI will think it is referencing a $variable)</li>
		<li><b>.</b> : Match any character. The '.' character always shows up in IP addresses, so if you do a grep for IP 192.168.10.1 the dots will match any character, not just a real dot; one would have to do a grep for 192\.168\.10\.1 in order to force matching a real dot, but in practice no point to make one's life too complicated... as there is probably nothing but an IP address which will match in the output anyway. Just be aware of what you are actually matching.</li>
		<li><b>()</b> : Round brackets are used for grouping, which can be used for capturing (not applicable to ACLI, except in variable capturing with regex syntax) or for associating the grouping with quantifiers or for performing alternation inside the grouping using the '|' character (next one)</li>
		<li><b>|</b> : Alternation can be used with ACLI, but only if inside grouping brackets and the pipe '|' character needs to be back slashed (otherwise it is interpreted by ACLI as a new grep pattern) like this: <i>(&lt;pattern1&gt;\|&lt;pattern2&gt;)</i><pre>
	VSP-8284XSQ:1#% sys | 00:51:00:ca:e0:(00\|81)
	         alias% show sys-info | 00:51:00:ca:e0:(00\|81)
	        BaseMacAddr        : 00:51:00:ca:e0:00
	        MgmtMacAddr        : 00:51:00:ca:e0:81
	
	VSP-8284XSQ:1#%
		</pre></li>
		<li><b>[]</b> : Bracketed character class. Match one character against a range of different possible characters. For example [abc] will match a single character as long as that character is either 'a' or 'b' or 'c'; [a-zA-Z] will match any character in the alphabet either lower or upper case.
		<pre>
	VSP-8284XSQ:1#% sys | 00:51:00:ca:e0:[08][01]
	         alias% show sys-info | 00:51:00:ca:e0:[08][01]
	        BaseMacAddr        : 00:51:00:ca:e0:00
	        MgmtMacAddr        : 00:51:00:ca:e0:81
	
	VSP-8284XSQ:1#%
		</pre></li>
	</ul>
	</li>
	<li><b>Character Classes</b></li>
	<ul>
		<li><b>\w</b> : Match a word character, i.e. alphanumeric plus underscore '_'</li>
		<li><b>\W</b> : Match a non-word character (opposite of above)</li>
		<li><b>\s</b> : Match a whitespace character (includes both spaces and tabs)</li>
		<li><b>\S</b> : Match a non-whitespace character (opposite of above)</li>
		<li><b>\t</b> : Match the tab character</li>
		<li><b>\d</b> : Match a decimal digit character (0-9)</li>
		<li><b>\D</b> : Match a non-digit character</li>
	</ul>
	<pre></pre>
	<li><b>Quantifiers</b></li>
	<p>The quantifiers below can be applied immediately after a character or the above character classes or for a grouping enclosed in brackets '()'</p>
	<ul>
		<li><b>*</b> : Match 0 or more times</li>
		<li><b>+</b> : Match 1 or more times</li>
		<li><b>?</b> : Match 0 or 1 times</li>
		<li><b>{n}</b> : Match exactly n times</li>
		<li><b>{n,}</b> : Match at least n times</li>
		<li><b>{n,m}</b> : Match at least n but not more than m times</li>
	</ul>
	<p>Note that for the last three quantifiers, the '{}' characters are overloaded by ACLI (they are used to embed Perl code snippets in CLI command lines) so to use them as quantifiers they will need to be back slashed (and only the first '{' needs back slashing: <b>\{n}, \{n,}, \{n,m}</b></p>
	<pre>
	VSP-8284XSQ:1#% sys | (.00)\{1}
	         alias% show sys-info | (.00){1}
	        BaseMacAddr        : 00:51:00:ca:e0:00
	        MgmtMacAddr        : 00:51:00:ca:e0:81
	         Last Change: 0 day(s), 00:00:41   (0 day(s), 02:37:55 ago)
	    Last Vlan Change: 0 day(s), 00:00:41   (0 day(s), 02:37:55 ago)
	Last Statistic Reset: 0 day(s), 00:00:00
	
	VSP-8284XSQ:1#% sys | (.00)\{2,3}
	         alias% show sys-info | (.00){2,3}
	         Last Change: 0 day(s), 00:00:41   (0 day(s), 02:38:28 ago)
	    Last Vlan Change: 0 day(s), 00:00:41   (0 day(s), 02:38:28 ago)
	Last Statistic Reset: 0 day(s), 00:00:00
	
	VSP-8284XSQ:1#% sys | (.00)\{3,}
	         alias% show sys-info | (.00){3,}
	Last Statistic Reset: 0 day(s), 00:00:00
	
	VSP-8284XSQ:1#%
	</pre>
</ul>
<p>For a complete reference on Perl regular expressions refer to the following link: <a href=https://perldoc.perl.org/perlre.html>https://perldoc.perl.org/perlre.html</a></p>
<p>To note that ACLI will always process the above Perl metacharacters, provided that they are provided in a non-quoted string or in a double quoted string. If instead the string is single quoted then none of the above metacharacters will be processed. For example, if you wanted to match(/highlight) a particular VSP log file timestamp, this command would not work:</p>
<pre>
	VSP8200-1:1#% show log file | 2020-04-23T23:00:29.894+00:00
	VSP8200-1:1#%
</pre>
<p>That is because the '+' character is interpreted as the 1 or more times quantifier and hence ACLI will be looking for lines where 4 is repetated 1 or more times followed by a 0 (with no '+' character in between), which will never match if that particular timestamp is in the log file. Enclosing the timestamp in single quotes solves the problem:</p>
<pre>
	VSP8200-1:1#% show log file | '2020-04-23T23:00:29.894+00:00'
	1 2020-04-23T23:00:29.894+00:00 VSP8200-1 CP1 - 0x000305cf - 00000000 GlobalRouter SW INFO Save license to file /intflash/premier.dat successful.
	1 2020-04-23T23:00:29.894+00:00 VSP8200-1 CP1 - 0x000045e3 - 00000000 GlobalRouter SNMP INFO Save config successful.
	VSP8200-1:1#%
</pre>
<p>For reference, we could have also solved the problem by backslashing the '+' character:</p>
<pre>
	VSP8200-1:1#% show log file | 2020-04-23T23:00:29.894\+00:00
	1 2020-04-23T23:00:29.894+00:00 VSP8200-1 CP1 - 0x000305cf - 00000000 GlobalRouter SW INFO Save license to file /intflash/premier.dat successful.
	1 2020-04-23T23:00:29.894+00:00 VSP8200-1 CP1 - 0x000045e3 - 00000000 GlobalRouter SNMP INFO Save config successful.
	VSP8200-1:1#%
</pre>
</div>



<div class="section" id="Advanced Grep">
<h2>Advanced Grep</h2>
<p>The simple line grep and negative greps covered so far are good for many uses, but fall short of many other use cases. For example, most CLI "show" commands start off with a handy banner which labels the various columns of output that follow:</p>
<pre>
	VSP-8284XSQ:1#% show interfaces gigabitEthernet name
	==========================================================================================
	                                        Port Name
	==========================================================================================
	PORT                                                     OPERATE  OPERATE  OPERATE
	NUM      NAME                           DESCRIPTION      STATUS   DUPLX    SPEED    VLAN
	----------------------------------------------------------------------------------------------------
	1/1                                     10GbNone         up       full     10000    Access
	1/2                                     10GbNone         up       full     10000    Access
	1/3                                     10GbNone         up       full     10000    Access
	1/4                                     10GbNone         down     full     0        Access
	1/5                                     10GbNone         down     full     0        Access
	1/6                                     10GbNone         down     full     0        Access
</pre>
<p>If we apply a simple grep to such a command we end up with the lines that contain our seeked grep string but, chances are, we lose most of the banners in the process:</p>
<pre>
	VSP-8284XSQ:1#% show interfaces gigabitEthernet name | up
	NUM      NAME                           DESCRIPTION      STATUS   DUPLX    SPEED    VLAN
	1/1                                     10GbNone         up       full     10000    Access
	1/2                                     10GbNone         up       full     10000    Access
	1/3                                     10GbNone         up       full     10000    Access
	VSP-8284XSQ:1#%
</pre>
<p>ACLI's advanced grep is a more "intelligent" grep which tries to infer which lines of output are banner lines (which we want to preserve) and which lines are actual data records (which we want to filter based on our grep string). Advanced grep is invoked simply by using a double pipe '||':</p>
<pre>
VSP-8284XSQ:1#% show interfaces gigabitEthernet name || up
	==========================================================================================
	                                        Port Name
	==========================================================================================
	PORT                                                     OPERATE  OPERATE  OPERATE
	NUM      NAME                           DESCRIPTION      STATUS   DUPLX    SPEED    VLAN
	----------------------------------------------------------------------------------------------------
	1/1                                     10GbNone         up       full     10000    Access
	1/2                                     10GbNone         up       full     10000    Access
	1/3                                     10GbNone         up       full     10000    Access
	VSP-8284XSQ:1#%
</pre>
<p>Not only does advanced grep preserve the banner lines, but also if the output ends with a summary line informing the user about how many data records were displayed by the show command, these will also be preserved. In addition to that, ACLI's advanced grep is able to complement these summary lines with an extra line, inserted by ACLI, with the actual number of lines with data which were displayed after applying grep filtering. These summary lines are typically displayed on show commands which dump the MAC tables, ARP cache, IP routes, etc..:</p>
<pre>
	VSP8400-3:1#% fdb ||00:dd:a0
	       alias% show vlan mac-address-entry ||00:dd:a0
	====================================================================================================
	                                    Vlan Fdb
	====================================================================================================
	VLAN            MAC                                   SMLT
	ID   STATUS     ADDRESS            INTERFACE          REMOTE   TUNNEL
	----------------------------------------------------------------------------------------------------
	100  learned    00:dd:a0:02:01:00  Port-3/18          false    VSP8400-2
	100  learned    00:dd:a0:02:02:00  c100:2/5           false    -
	
	c: customer vid   u: untagged-traffic
	126 out of 126 entries in all fdb(s) displayed.
	acli.pl: Displayed Record Count = 2
	Total peer MAC move count : 0
	VSP8400-3:1#%
</pre>
<p>Notice the lines above starting with <i>acli.pl:</i>; this was added by ACLI to indicate the number of records displayed by ACLI.</p>
<p>The other most flagrant case where simple line grep falls short is when trying to apply grep filtering to the switch config file, on Extreme devices which use a Cisco-like configuration syntax, where the config settings can be broken up into settings within a configuration context. For example, to enable an Ethernet port on VOSS or ERS platforms, it is necessary to first enter the Ethernet port configuration context with <i>'interface gigabitEthernet 1/1'</i> and then use a second command/line to enable the port <i>'no shutdown'</i>. A simple line grep for the port number (1/1) will yield the configuration context line, but not the <i>'no shutdown'</i> line; while a grep for <i>'shutdown'</i> will yield the <i>'no shutdown'</i> line, but not the interface configuration context line:</p>
<pre>
	VSP-8284XSQ:1#% cfg | 1/1
	         alias% show running-config -ib |1/1
	interface GigabitEthernet 1/1
	
	VSP-8284XSQ:1#%
</pre>
<p>The above is not hugely useful, as we see none of the configuration pertaining to port 1/1.</p>
<pre>
	VSP-8284XSQ:1#% cfg | shutdown
	         alias% show running-config -ib | shutdown
	   no shutdown
	   no shutdown
	   no shutdown
	   no shutdown
	
	VSP-8284XSQ:1#%
</pre>
<p>The above is just plain stupid. Ok, clearly 4 Ethernet ports on this switch are enabled, but which ones ?</p>
<p>If instead we use ACLI's advanced grep we obtain the following:</p>
<pre>
	VSP-8284XSQ:1#% cfg || 1/1
	         alias% show running-config -ib || 1/1
	config terminal
	interface GigabitEthernet 1/1
	   no shutdown
	exit
	qos queue-profile 1 member add 1/1-1/42,2/1-2/42
	end
	
	VSP-8284XSQ:1#%
</pre>
<p>Now we have something useful: all the configuration which pertains to port 1/1</p>
<pre>
	VSP-8284XSQ:1#% cfg || shutdown
	         alias% show running-config -ib || shutdown
	config terminal
	interface GigabitEthernet 1/1
	   no shutdown
	exit
	interface GigabitEthernet 1/2
	   no shutdown
	exit
	interface GigabitEthernet 1/3
	   no shutdown
	exit
	interface GigabitEthernet 1/4
	   no shutdown
	exit
	end
	
	VSP-8284XSQ:1#%
</pre>
<p>And in the above case, we now get to see all enabled ports (configured with 'no shutdown') on the switch.</p>
<p>Note that ACLI's advanced grep becomes most compelling when the config file is properly indented, as in the examples above. However indentation of config files is not a given on all Extreme Network devices. On PassportERS/VOSS and BaystackERS platforms no indentation is provided and here it is necessary to include the '-i' switch after the "show running-config" command so that ACLI can apply the correct indentation. On other Extreme platforms (like the WLAN9100, SecureRouter, ISW), which also have a context-based configuration file, the indentation is already provided by the switch, so in this case the '-i' switch is not required (no harm adding it though). In general if using the preconfigured 'cfg' alias this will automatically produce the correct CLI command to display the switch configuration file with the '-i' & '-b' switches added accordingly.</p>
<p>In the case of other Extreme Networks devices which use a flat configuration file without any configuration contexts, ACLIs advanced grep does not bring any immediate benefits, as on these devices every line in the configuration file is fully contained and independent from any other line in the configuration file. Such is the case on ExtremeXOS switches and also on older PassportERS chassis using the old PPCLI. If we take an XOS switch, filtering on disabled ports works equally well with simple and advanced grep:</p>
<pre>
	EXOS-VM.11 #% cfg | disable port
	         alias% show configuration -b | disable port
	disable port 2
	disable port 3
	EXOS-VM.11 #%
	EXOS-VM.11 #% cfg || disable port
	         alias% show configuration -b || disable port
	disable port 2
	disable port 3
	EXOS-VM.11 #%
</pre>
<p>And if we filter on a given port number:</p>
<pre>
	EXOS-VM.11 #% cfg | 2
	         alias% show configuration -b | 2
	disable port 2
	configure ports 2 debounce time 0
	EXOS-VM.11 #%
	EXOS-VM.11 #% cfg || 2
	         alias% show configuration -b || 2
	configure vr VR-Default delete ports 1-3
	configure vr VR-Default add ports 1-3
	disable port 2
	configure vlan Default add ports 1-3 untagged
	configure ports 2 debounce time 0
	EXOS-VM.11 #%
</pre>
<p>Yet, we see a difference in the above example when using advanced grep, which constitutes another benefit of using ACLI's advanced grep. Ethernet switches can have many (even hundreds of) ports. It is common to use short hand port ranges in the configuration files. However, if performing a simple grep on a port number which falls inside one of these ranges then the corresponding configuration line will be missed. The ACLI terminal, in interactive mode, knows exactly the port layout of the switch it is connected to (discovery of the port layout is done during initial connection/discovery). ACLI's advanced grep is able to leverage this information every time a port range is found in the configuration file and is thus able to determine whether or not the config line containing the port range should be displayed based upon the grep string provided. Follows a similar example with VOSS:</p>
<pre>
	VSP-8284XSQ:1#% cfg||1/2
	         alias% show running-config -ib ||1/2
	config terminal
	vlan members remove 1 1/1-1/4
	vlan members 10 1/1-1/4 portmember
	interface GigabitEthernet 1/2
	   no shutdown
	exit
	qos queue-profile 1 member add 1/1-1/42,2/1-2/42
	end
	
	VSP-8284XSQ:1#%
</pre>
<p>Note that port 1/2 is included in the range of port members removed from default VLAN 1 and in the port range added to VLAN10; also it is part of QoS queue-profile range.</p>

<p>Regular expressions can of course also be used with ACLI's advanced grep.</p>
<p>Concentrating on using advanced grep on the connected device's configuration file, there are other configuration components where it is desirable to have a more intelligent grep function. The best example for an Ethernet switch is the VLAN construct which is always a major component of the configuration file. Would it not be desirable to perform a grep for one particular VLAN and obtain all the configuration lines for that VLAN ?. The ACLI advanced grep does just that when the grep string provided is in the format <i>vlan &lt;id|list|range&gt;</i></p>
<pre>
	VSP8200-1:1#% cfg || vlan 210
	       alias% show running-config -ib || vlan 210
	config terminal
	vlan create 210 name "Green-Cmp210" type port-mstprstp 0
	vlan i-sid 210 2800210
	interface Vlan 210
	   vrf green
	   ip address 20.1.210.1 255.255.255.0 2
	   ip spb-multicast enable
	   ip dhcp-relay
	   ip rsmlt
	   ip rsmlt holdup-timer 9999
	exit
	router vrf green
	   ip dhcp-relay fwd-path 20.1.210.1 20.9.190.200
	   ip dhcp-relay fwd-path 20.1.210.1 20.9.190.200  enable
	   ip dhcp-relay fwd-path 20.1.210.1 20.9.190.200  mode bootp_dhcp
	exit
	ip rsmlt peer-address 20.1.210.2 b0:ad:aa:42:95:02 210
	slpp vid  210
	end
	
	VSP8200-1:1#%
</pre>
<p>Note that not all the lines returned have an exact match for the string <i>'vlan 210'</i>. ACLI's advanced grep is being a bit more clever in knowing what lines are likely to be applicable to the configuration of VLAN 210 on, in this case, a VOSS switch. Not only, some lines, like the dhcp-relay ones, have absolutely no reference to any VLAN, so how does ACLI know they need to be included? The trick is that these lines contain the IP address which is configured on VLAN 210 and therefore are included in the final result.</p>
<p>Similar to the VLAN example, ACLI's advanced grep offers grep for a range of other configuration components. The embedded <i>'@help'</i> command gives a complete list:</p>
<pre>
	show running ||vlan [&lt;vid-or-name-list&gt;]            grep on vlan config contexts
	show running ||mlt [&lt;mltid-list&gt;]                   grep on mlt config contexts
	show running ||loopback [&lt;CLIPid-list&gt;]             grep on loopback config contexts
	show running ||&lt;ospf|rip|isis|bgp list&gt;             grep on well known router config contexts
	show running ||router &lt;protocol-list&gt;               grep on any router config context
	show running ||vrf [&lt;vrfname-list&gt;]                 grep on router vrf config contexts
	show running ||route-map [&lt;routemap-list&gt;]          grep on route-map config contexts
	show running ||i-sid [&lt;isid-list&gt;]                  grep on i-sid config contexts
	show running ||acl [&lt;acl-id-list&gt;]                  grep on filter acl ids
	show running ||logical-intf [&lt;intf-list&gt;]           grep on ISIS logical interfaces
	show running ||mgmt [&lt;port-list or id-list&gt;]        grep on Mgmt interfaces
	show running ||ssid [&lt;ssid-name-list&gt;]              grep on WLAN SSIDs
</pre>
<p>Some examples follow.</p>
<p>Grep on MLTs:</p>
<pre>
	VSP8200-1:1#% cfg || mlt 1,14
	       alias% show running-config -ib || mlt 1,14
	config terminal
	mlt 1 enable name "ERS4900-STK"
	mlt 1 member 2/1
	mlt 1 encapsulation dot1q
	mlt 14 enable name "X670-4"
	mlt 14 member 2/14
	mlt 14 encapsulation dot1q
	interface mlt 1
	   smlt
	   fa
	   fa enable
	   fa management i-sid 2800209 c-vid 209
	exit
	interface mlt 14
	   smlt
	   fa
	   fa enable
	   no fa message-authentication
	   fa management i-sid 2800209 c-vid 209
	exit
	end
	
	VSP8200-1:1#%
</pre>
<p>Grep on router instance:</p>
<pre>
	VSP8200-1:1#% cfg || router isis
	       alias% show running-config -ib || router isis
	config terminal
	router isis
	   spbm 1
	   spbm 1 nick-name 0.00.31
	   spbm 1 b-vid 4051-4052 primary 4051
	   spbm 1 multicast enable
	   spbm 1 ip enable
	   spbm 1 ipv6 enable
	   spbm 1 smlt-virtual-bmac 82:bb:00:00:31:ff
	   spbm 1 smlt-peer-system-id 82bb.0000.3200
	exit
	router isis
	   sys-name "VSP8200-1"
	   ip-source-address 20.0.20.31
	   ip-tunnel-source-address 172.16.0.81 vrf fe
	   ipv6-source-address 2000:20:0:0:0:0:0:31
	   is-type l1
	   system-id 82bb.0000.3100
	   manual-area 49.0000
	exit
	router isis enable
	router isis
	   accept i-sid 3800009 enable
	exit
	router isis
	   redistribute direct
	   redistribute direct route-map "Suppress-IST"
	   redistribute direct enable
	exit
	end
	
	VSP8200-1:1#%
</pre>
<p>Grep on VRF instance:</p>
<pre>
	VSP8200-1:1#% cfg || vrf green
	       alias% show running-config -ib || vrf green
	config terminal
	ip vrf green vrfid 1
	interface Vlan 210
	   vrf green
	exit
	router vrf green
	   ip dhcp-relay fwd-path 20.1.210.1 20.9.190.200
	   ip dhcp-relay fwd-path 20.1.210.1 20.9.190.200  enable
	   ip dhcp-relay fwd-path 20.1.210.1 20.9.190.200  mode bootp_dhcp
	exit
	router vrf green
	   ipvpn
	   i-sid 3800001
	   mvpn enable
	   ipvpn enable
	exit
	router vrf green
	   isis accept i-sid 3800009 enable
	exit
	router vrf green
	   isis redistribute direct
	   isis redistribute direct enable
	exit
	isis apply redistribute direct vrf green
	end
	
	VSP8200-1:1#%
</pre>
<p>Grep of route-map:</p>
<pre>
	VSP8400-3:1#% cfg || route-map host-routes
	       alias% show running-config -ib || route-map host-routes
	config terminal
	router vrf shared
	   route-map "host-routes" 1
	      no permit
	      enable
	      match network "host-routes"
	   exit
	exit
	router vrf shared
	   isis accept route-map "host-routes"
	   isis accept isid-list "client-vrfs" route-map "host-routes"
	exit
	end
	
	VSP8400-3:1#%
</pre>
</div>



<div class="section" id="Advanced Negative Grep">
<h2>Advanced Negative Grep</h2>
<p>Advanced negative grep is very much the same as advanced grep, except that it will hide the lines matching the negative advanced grep instead of showing them. Negative advanced grep is invoked simply by using a double bang '!!'. So, if we have a switch with this simple config and just one VLAN10:</p>
<pre>
	VSP-8284XSQ:1#% cfg
	         alias% show running-config -ib
	config terminal
	boot config flags sshd
	boot config flags telnetd
	password password-history 3
	ssh
	no web-server secure-only
	vlan members remove 1 1/1-1/4
	vlan create 10 type port-mstprstp 0
	vlan members 10 1/1-1/4 portmember
	interface Vlan 10
	   ip address 192.168.10.1 255.255.255.0 0
	exit
	interface mgmtEthernet mgmt
	   auto-negotiate
	   ip address 192.168.56.71 255.255.255.0
	exit
	qos queue-profile 1 member add 1/1-1/42,2/1-2/42
	no ntp
	slpp enable
	slpp vid  10
	end
	
	VSP-8284XSQ:1#%
</pre>
<p>A positive advanced grep for VLAN10 yields:</p>
<pre>
	VSP-8284XSQ:1#% cfg||vlan 10
	         alias% show running-config -ib ||vlan 10
	config terminal
	vlan create 10 type port-mstprstp 0
	vlan members 10 1/1-1/4 portmember
	interface Vlan 10
	   ip address 192.168.10.1 255.255.255.0 0
	exit
	slpp vid  10
	end
	
	VSP-8284XSQ:1#%
</pre>
<p>While a negative advanced grep for VLAN10 yields:</p>
<pre>
	VSP-8284XSQ:1#% cfg!!vlan 10
	         alias% show running-config -ib !!vlan 10
	config terminal
	boot config flags sshd
	boot config flags telnetd
	password password-history 3
	ssh
	no web-server secure-only
	vlan members remove 1 1/1-1/4
	interface mgmtEthernet mgmt
	   auto-negotiate
	   ip address 192.168.56.71 255.255.255.0
	exit
	qos queue-profile 1 member add 1/1-1/42,2/1-2/42
	no ntp
	slpp enable
	end
	
	VSP-8284XSQ:1#%
</pre>

<p>Negative advanced grep often makes more sense when concatenated with positive greps so as to remove some unwanted output from the output produced from the previous grep function.</p>
<p>Let us take the same advanced positive grep of VLAN 210 as we did before:</p>
<pre>
	VSP8200-1:1#% cfg || vlan 210
	       alias% show running-config -ib || vlan 210
	config terminal
	vlan create 210 name "Green-Cmp210" type port-mstprstp 0
	vlan i-sid 210 2800210
	interface Vlan 210
	   vrf green
	   ip address 20.1.210.1 255.255.255.0 2
	   ip spb-multicast enable
	   ip dhcp-relay
	   ip rsmlt
	   ip rsmlt holdup-timer 9999
	exit
	router vrf green
	   ip dhcp-relay fwd-path 20.1.210.1 20.9.190.200
	   ip dhcp-relay fwd-path 20.1.210.1 20.9.190.200  enable
	   ip dhcp-relay fwd-path 20.1.210.1 20.9.190.200  mode bootp_dhcp
	exit
	ip rsmlt peer-address 20.1.210.2 b0:ad:aa:42:95:02 210
	slpp vid  210
	end
	
	VSP8200-1:1#%
</pre>
<p>And let's assume we do not want to see the DHCP and RSMLT and SLPP config sections of the VLAN 210; so we can simply append a negative grep to suppress the those lines:</p>
<pre>
	VSP8200-1:1#% cfg || vlan 210 !! dhcp,rsmlt,slpp
	       alias% show running-config -ib || vlan 210 !! dhcp,rsmlt,slpp
	config terminal
	vlan create 210 name "Green-Cmp210" type port-mstprstp 0
	vlan i-sid 210 2800210
	interface Vlan 210
	   vrf green
	   ip address 20.1.210.1 255.255.255.0 2
	   ip spb-multicast enable
	exit
	end
	
	VSP8200-1:1#%
</pre>
</div>


</BODY>
</HTML>
