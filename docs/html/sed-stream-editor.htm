<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
	<meta name="GENERATOR" content="Microsoft&reg; HTML Help Workshop 4.1">
	<Title>Stream Editor (SED)</Title>
</HEAD>
<BODY>
<h1>Stream Editor (SED)</h1>
<p>Stream editing (named sed as per the Unix utility) allows output from the switch or input to the switch to be modified and edited on the fly. The most common use of this feature will be either to modify the output of the switch or to re-colour certain keywords or addressing identifiers. Manipulation of the input stream is also possible but not recommended.</p>
<p>For both input and output, the feature allows a pattern match string to be supplied with a corresponding replacement string; this is implemented using Perl's <i>s/PATTERN/REPLACEMENT/mgee</i> operator, so capturing parentheses are allowed in the regex PATTERN and can be re-used in the REPLACEMENT string. The REPLACEMENT string can also be a Perl code snippet. For output only, it is also possible to associate a pattern with a re-colouring profile. Re-colouring is implemented using <i>s/PATTERN/&lt;start-ANSI-colour-sequence&gt;$&&lt;stop-ANSI-colour-sequence&gt;/mgee</i>; when defining re-colouring patterns it will come useful to polish up on Perl's lookbehind and lookahead assertions as well as code assertions which can allow matching patterns immediately before or immediately after the actual pattern we want to recolour without recolouring those as well (refer to <a href=https://perldoc.perl.org/perlre.html>Perldoc perlre</a>). Only the 8 standard colours are supported, for either foreground or background as well as the ability to set any of bright, underline and reverse.</p>

<p>The sed patterns can be set either manually via the embedded <i>'@sed'</i> command or via the <i>'sed'</i> command in the ACLI control interface or or they can be setup in the <i>acli.sed</i> file.</p>
<p>We shall look at the former first. A new pattern can be set with one of the following syntaxes:</p>
<pre>
	@sed input add [&lt;index:1-20&gt;] '&lt;pattern&gt;' '&lt;replacement&gt;'
	@sed input add [&lt;index:1-20&gt;] '&lt;pattern&gt;' '{&lt;replacement-code&gt;}'
	@sed output add [&lt;index:1-20&gt;] '&lt;pattern&gt;' '&lt;replacement&gt;'
	@sed output add [&lt;index:1-20&gt;] '&lt;pattern&gt;' '{&lt;replacement-code&gt;}'
	@sed output add colour [&lt;index:1-20&gt;] '&lt;pattern&gt;' '&lt;colour-profile&gt;'
</pre>
<p>In all cases an index for the pattern must be supplied (except in scripting mode) which will determine the order in which the sed patterns will be applied. ACLI currently limits the patterns to a maximum of 20 per pattern type (this can be overridden in <i>'acli.sed'</i>) as too many patterns might start consuming too much CPU. In scripting/sourcing mode it is possible to omit the index on the above commands and additional patterns will be accepted with an auto-generated index starting from 21 (or the overridden value + 1 specified in <i>'acli.sed'</i>). Sed patterns defined in sourcing mode (with index &gt; 20) will not be persistent and will automatically disappear when existing sourcing mode.</p>
<p>The <i>'&lt;pattern&gt;' & '&lt;replacement&gt;'</i> fields need to be quoted and will be used in the Perl operator <i>s/&lt;pattern&gt;/&lt;replacement&gt;/mgee</i></p>
<p>The <i>'{&lt;replacement-code&gt;}'</i> field need to be quoted in single quotes + enclosed in curlies {} and will be used in the Perl operator <i>s/&lt;pattern&gt;/&{&lt;replacement-code&gt;}/mge</i></p>

<p>The last syntax defines a pattern to be output re-coloured and the <i>&lt;colour-profile&gt;</i> needs to refer to an already existing sed colour profile.</p>
<p>All patterns are either assigned globally (will be used againsat any Extreme device in interactive mode) or for a specific Extreme product family type. The above <i>'@sed'</i> commands will always apply the pattern to the currently active product type. Defining global patterns needs to be done in the <i>acli.sed</i> file or by using the <i>sed</i> command in the ACLI control interface when the terminal is in transparent mode.</p>
<p>Sed colour profiles can be created with the following syntax:</p>
<pre>
	@sed colour &lt;profile-name&gt; background|bright|foreground|reverse|underline
</pre>
<p>Where <i>background|foreground</i> can be set to any of: <i>black|blue|cyan|green|magenta|none|red|white|yellow</i>; and <i>bright|reverse|underline</i> can be either <i>enabled</i> or <i>disabled</i></p>
<p>Let us see a simple example of how we can use this feature. Here is the log file of a typical VOSS switch:</p>
<pre>
VSP-8284XSQ:1#% show log file
	1 2020-01-19T13:12:09.198Z VSP-8284XSQ IO1 - 0x00270428 - 00000000 GlobalRouter SW INFO Lifecycle: Start
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process namServer started, pid:2095
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process sockserv started, pid:2096
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process oom95 started, pid:2097
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process oom90 started, pid:2098
	1 2020-01-19T13:12:09.252Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process imgsync.x started, pid:2099
	1 2020-01-19T13:12:10.770Z VSP-8284XSQ IO1 - 0x00264541 - 00000000 GlobalRouter SW INFO Image Integrity verification passed.
	1 2020-01-19T13:12:10.780Z VSP-8284XSQ IO1 - 0x0026452f - 00000000 GlobalRouter SW INFO No patch set.
	1 2020-01-19T13:12:11.253Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process logServer started, pid:2175
	1 2020-01-19T13:12:11.256Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process trcServer started, pid:2176
	1 2020-01-19T13:12:11.258Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process oobServer started, pid:2178
	1 2020-01-19T13:12:11.259Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process nickServer started, pid:2179
	1 2020-01-19T13:12:11.259Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process nickClient started, pid:2180
	1 2020-01-19T13:12:11.264Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process hwsServer started, pid:2181
	1 2020-01-19T13:12:11.276Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process redis-server started, pid:2184
	1 2020-01-19T13:12:11.289Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process cbcp-main.x started, pid:2188
	1 2020-01-19T13:12:11.295Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process rssServer started, pid:2191
	1 2020-01-19T13:12:11.298Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process dbgServer started, pid:2192
	1 2020-01-19T13:12:11.309Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process dbgShell started, pid:2194
	1 2020-01-19T13:12:11.322Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process khiCollection started, pid:2197
	1 2020-01-19T13:12:11.323Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process coreManager.x started, pid:2198
	1 2020-01-19T13:12:11.332Z VSP-8284XSQ IO1 - 0x0027042b - 00000000 GlobalRouter SW INFO Process filer started, pid:2199
</pre>
<p>These lines can often be very long and some of the information provided in these lines could be omitted; for instance the <i>00000000</i> number is not hugely useful; let's remove it with the following sed pattern:</p>
<pre>
	VSP-8284XSQ:1#% @sed output add 1 '- 00000000 ' ''
	Output pattern 1 added : '- 00000000 ' => ''
</pre>
<p>If we now show the log file we get:</p>
<pre>
	VSP-8284XSQ:1#% show log file
	1 2020-01-19T13:12:09.198Z VSP-8284XSQ IO1 - 0x00270428 GlobalRouter SW INFO Lifecycle: Start
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process namServer started, pid:2095
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process sockserv started, pid:2096
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process oom95 started, pid:2097
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process oom90 started, pid:2098
	1 2020-01-19T13:12:09.252Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process imgsync.x started, pid:2099
	1 2020-01-19T13:12:10.770Z VSP-8284XSQ IO1 - 0x00264541 GlobalRouter SW INFO Image Integrity verification passed.
	1 2020-01-19T13:12:10.780Z VSP-8284XSQ IO1 - 0x0026452f GlobalRouter SW INFO No patch set.
	1 2020-01-19T13:12:11.253Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process logServer started, pid:2175
	1 2020-01-19T13:12:11.256Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process trcServer started, pid:2176
	1 2020-01-19T13:12:11.258Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process oobServer started, pid:2178
	1 2020-01-19T13:12:11.259Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process nickServer started, pid:2179
	1 2020-01-19T13:12:11.259Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process nickClient started, pid:2180
	1 2020-01-19T13:12:11.264Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process hwsServer started, pid:2181
	1 2020-01-19T13:12:11.276Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process redis-server started, pid:2184
	1 2020-01-19T13:12:11.289Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process cbcp-main.x started, pid:2188
	1 2020-01-19T13:12:11.295Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process rssServer started, pid:2191
	1 2020-01-19T13:12:11.298Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process dbgServer started, pid:2192
	1 2020-01-19T13:12:11.309Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process dbgShell started, pid:2194
	1 2020-01-19T13:12:11.322Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process khiCollection started, pid:2197
	1 2020-01-19T13:12:11.323Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process coreManager.x started, pid:2198
	1 2020-01-19T13:12:11.332Z VSP-8284XSQ IO1 - 0x0027042b GlobalRouter SW INFO Process filer started, pid:2199
</pre>
<p>This is better. But we could go further. The reference to <i>GlobalRouter</i> is also of little value. Let's remove that as well:</p>
<pre>
	VSP-8284XSQ:1#% @sed output add 2 'GlobalRouter ' ''
	Output pattern 2 added : 'GlobalRouter ' => ''
</pre>
<p>And we get a much more compact log file:</p>
<pre>
	VSP-8284XSQ:1#% show log file
	1 2020-01-19T13:12:09.198Z VSP-8284XSQ IO1 - 0x00270428 SW INFO Lifecycle: Start
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process namServer started, pid:2095
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process sockserv started, pid:2096
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process oom95 started, pid:2097
	1 2020-01-19T13:12:09.251Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process oom90 started, pid:2098
	1 2020-01-19T13:12:09.252Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process imgsync.x started, pid:2099
	1 2020-01-19T13:12:10.770Z VSP-8284XSQ IO1 - 0x00264541 SW INFO Image Integrity verification passed.
	1 2020-01-19T13:12:10.780Z VSP-8284XSQ IO1 - 0x0026452f SW INFO No patch set.
	1 2020-01-19T13:12:11.253Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process logServer started, pid:2175
	1 2020-01-19T13:12:11.256Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process trcServer started, pid:2176
	1 2020-01-19T13:12:11.258Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process oobServer started, pid:2178
	1 2020-01-19T13:12:11.259Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process nickServer started, pid:2179
	1 2020-01-19T13:12:11.259Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process nickClient started, pid:2180
	1 2020-01-19T13:12:11.264Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process hwsServer started, pid:2181
	1 2020-01-19T13:12:11.276Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process redis-server started, pid:2184
	1 2020-01-19T13:12:11.289Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process cbcp-main.x started, pid:2188
	1 2020-01-19T13:12:11.295Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process rssServer started, pid:2191
	1 2020-01-19T13:12:11.298Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process dbgServer started, pid:2192
	1 2020-01-19T13:12:11.309Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process dbgShell started, pid:2194
	1 2020-01-19T13:12:11.322Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process khiCollection started, pid:2197
	1 2020-01-19T13:12:11.323Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process coreManager.x started, pid:2198
	1 2020-01-19T13:12:11.332Z VSP-8284XSQ IO1 - 0x0027042b SW INFO Process filer started, pid:2199
</pre>
<p>These sed patterns could be permanently defined in the <i>'acli.sed'</i> file and get applied to all output received from the switch. Though in the above example it would probably make more sense to add the relevant <i>@sed</i> commands to the alias command used to display the log file, then these will only apply to the output of the "show log file" command and nothing else. The <i>'log'</i> alias in the default supplied <i>acli.alias</i> file now does precisely that and, for VOSS devices, executes the following commands:</p>
<pre>
	@sed output add '- 00000000 |GlobalRouter ' ''; show log file
</pre>
<p>Note that since the replacement patterns are the same (empty string) we can combine the patterns into one, which is more efficient. Also a semi-colon fragmented command is in effect an ACLI script so the individual commands will be executed in sourcing mode, which means we do not have to set an index number for the pattern so that the pattern will be dynamic and will automatically get deleted once ACLI comes out of sourcing mode, i.e. once the alias command execution has completed.</p>

<p>Now let's see an example where we use sed patterns to recolour the output. These sed patterns define 2 colours, green and red, and assign these to any occurrence of "up" or "down" respectively:</p>
<pre>
	VSP8200-1:1#% @sed colour green foreground green
	VSP8200-1:1#% @sed colour green bright enable
	VSP8200-1:1#% @sed output add colour 3 '(?i)\bup\b' green
	Output pattern 1 added : '(?i)\bup\b' => colour green
	
	VSP8200-1:1#% @sed colour red foreground red
	VSP8200-1:1#% @sed colour red bright enable
	VSP8200-1:1#% @sed output add colour 4 '(?i)\bdown\b' red
	Output pattern 2 added : '(?i)\bdown\b' => colour red
</pre>
<p>We now get output colored as shown:</p>
<img src="../images/sed-colour.png" />



<p>To view currently defined sed colour profiles and patterns use the following:</p>
<pre>
	@sed colour info
	@sed info
</pre>
<img src="../images/sed-info.png" />
<p>Note how the colouring sed replacement pattern simply pre-pends the text to re-colour with the corresponding ANSI escape sequence for the desired colour and then appends another ANSI escape sequence to reset the colours back to default.</p>

<p>As mentioned before, input patterns are a bit more delicate. The following is an example used by the ACLI author which makes use of input patterns for an application where many VSPs are scripted via a single ACLI script. Each VSP gets the slot number of its ports re-mapped from 1 to a new value X (assigned to <i>$u</i> here) which reflects the rack number of where the VSP switch is located (kind of distributed stacking via ACLI!). The VSPs in question are VSP4000s which have all ports on slot-1, and after appling the following <i>@sed</i> config it will appear that the VSP has all its ports on slot-12:</p>
<pre>
	$u = 12
	@sed output add 1 '\b1/(\d)' "$u/\$1"
	@sed input add 1 "\b$u/(\d)" '1/$1'
</pre>
<p>We get this:</p>
<pre>
	VSP-8284XSQ:1#% $u = 12
	
	$u            = 12
	
	VSP-8284XSQ:1#% @sed output add 1 '\b1/(\d)' "$u/\$1"
	          vars% @sed output add 1 '\b1/(\d)' "12/$1"
	Output pattern 1 added : '\b1/(\d)' => '12/$1'
	
	VSP-8284XSQ:1#% @sed input add 1 "\b$u/(\d)" '1/$1'
	          vars% @sed input add 1 "\b12/(\d)" '1/$1'
	Input pattern 1 added : '\b12/(\d)' => '1/$1'
	
	VSP-8284XSQ:1#%
	VSP-8284XSQ:1#% if
	         alias% show interfaces gigabitEthernet interface!!\blocked
	==========================================================================================
	                                      Port Interface
	==========================================================================================
	PORT                               LINK  PORT           PHYSICAL          STATUS
	NUM      INDEX DESCRIPTION         TRAP  LOCK     MTU   ADDRESS           ADMIN  OPERATE
	------------------------------------------------------------------------------------------
	12/1      192   10GbNone            true  false    1950  00:51:00:3f:a8:00 down   down
	12/2      193   10GbNone            true  false    1950  00:51:00:3f:a8:01 down   down
	12/3      194   10GbNone            true  false    1950  00:51:00:3f:a8:02 down   down
	12/4      195   10GbNone            true  false    1950  00:51:00:3f:a8:03 down   down
	12/5      196   10GbNone            true  false    1950  00:51:00:3f:a8:04 down   down
	12/6      197   10GbNone            true  false    1950  00:51:00:3f:a8:05 down   down
	12/7      198   10GbNone            true  false    1950  00:51:00:3f:a8:06 down   down
	12/8      199   10GbNone            true  false    1950  00:51:00:3f:a8:07 down   down
	12/9      200   10GbNone            true  false    1950  00:51:00:3f:a8:08 down   down
	12/10     201   10GbNone            true  false    1950  00:51:00:3f:a8:09 down   down
	12/11     202   10GbNone            true  false    1950  00:51:00:3f:a8:0a down   down
	12/12     203   10GbNone            true  false    1950  00:51:00:3f:a8:0b down   down
	12/13     204   10GbNone            true  false    1950  00:51:00:3f:a8:0c down   down
	12/14     205   10GbNone            true  false    1950  00:51:00:3f:a8:0d down   down
	12/15     206   10GbNone            true  false    1950  00:51:00:3f:a8:0e down   down
	--More (q=Quit, space/return=Continue, ^P=Toggle on/off)--
</pre>
<p>And thanks to the input sed pattern, the illusion is complete, even if configuring those ports:</p>
<pre>
	VSP-8284XSQ:1#% configure terminal
	Enter configuration commands, one per line.  End with CNTL/Z.
	VSP-8284XSQ:1(config)#% ife 12/1
	                 alias% interface gigabitEthernet 12/1
	VSP-8284XSQ:1(config-if)#% name test
	VSP-8284XSQ:1(config-if)#% ifname
	                    alias% show interfaces gigabitEthernet name ||\d+/\d+\s+\S.*\S\s+\S+\s+(up|down)
	==================================================================================================
	                                            Port Name
	==================================================================================================
	PORT                                                        OPERATE  OPERATE  OPERATE
	NUM      NAME                           DESCRIPTION         STATUS   DUPLEX   SPEED    VLAN
	--------------------------------------------------------------------------------------------------
	12/1      test                           10GbNone            down     full     0        Access
	VSP-8284XSQ:1(config-if)#%
</pre>

<p>To delete a sed colour profile or a pattern use the following syntaxes:</p>
<pre>
	@sed colour &lt;profile-name&gt; delete
	@sed input delete &lt;index:1-20&gt;
	@sed output delete &lt;index:1-20&gt;
</pre>
<p>To reset and remove all sed patterns use the following command:</p>
<pre>
	@sed reset
</pre>

<p>A better way to define sed patterns and colour profiles is to supply them in the <i>acli.sed</i> file. A <i>acli.sed</i> file is shipped by default with ACLI and contains a number of pre-defined colour profiles and sed patterns and examples; this file is contained in the ACLI install directory and is a versioned file, which means it is liable to get updated and replaced when the ACLI update script is run, if a newer version of it exists.</p>
<p>If you'd like to edit or modify this file you should create your own <i>acli.sed</i> file in one of the following paths:</p>
<ul>
	<li>ENV path <i>%ACLI%</i> (if you defined it)</li>
	<li>ENV path <i>$HOME/.acli</i> (on Unix systems)</li>
	<li>ENV path <i>%USERPROFILE%\.acli</i> (on Windows)</li>
</ul>
<p>The <i>acli.sed</i> file needs to be edited with a specific syntax.</p>
<p>Lines commencing with '#' are comment lines and are ignored</p>
<p>Before any sed patterns are defined, a <i>start-id</i> and <i>max-id</i> directives can be set:</p>
<ul>
	<li>A max-id can be supplied to override the default maximum value of 20 for pattern indexes which is otherwise hardcoded in ACLI terminal. This maximum value applies to each of the three possible sed pattern types; i.e. up to 20 output patters, 20 output re-colouring patterns and 20 input patterns. It is not a good idea to have too many sed patterns, this can affect performance. Up to 20 seems ok.
	<pre>max-id = &lt;number&gt;</pre>
	</li>
	<li>Every pattern is assigned an index number which determines the order in which the patterns are applied; patterns read in from this file will be applied with sequential indexes starting from <i>start-id</i>. By setting a value &gt; 1 it is possible to reserve index numbers from 1 to X for interactive use via the @sed embedded command, while patterns defined in <i>acli.sed</i> will get allocated index numbers from X+1 to <i>max-id</i>.
	<pre>start-id = &lt;number&gt;</pre>
	</li>
</ul>
<p>Colour profles are defined with the following syntax:</p>
<pre>	colour &lt;profile-name&gt; [foreground &lt;black|blue|cyan|green|magenta|red|white|yellow&gt;] [background &lt;black|blue|cyan|green|magenta|red|white|yellow&gt;] [bright] [reverse] [underline]
</pre>
<p>All patterns defined in the file (Input, Output and Output Colour) can be categorized as either global or against any of the Conrrol::CLI family types. This allows to reduce the number of patterns checked against any family device type. The order of patterns can however remain important, so the	applicable category can be set at any time and all subsequent pattern definitions will apply to that category, until a new category is set. If no category is set, global will apply as default for all patterns. A list of family types can also be specified ("global" must not be in the list) in which case subsequent patterns are enumerated sequentially for each family type listed.</p>
<pre>	category global
	category [list of: BaystackERS|PassportERS|ExtremeXOS|ISW|Series200|Wing|SLX|SecureRouter|WLAN9100|Accelar]
</pre>


<p>While patterns can be supplied with these syntaxes:</p>
<pre>
	[output] '&lt;pattern&gt;' colour '&lt;profile-name&gt;' [# &lt;optional comments&gt;]
	[output] '&lt;pattern&gt;' '&lt;replacement&gt;' [# &lt;optional comments&gt;]
	[output] '&lt;pattern&gt;' {&lt;replacecode&gt;} [# &lt;optional comments&gt;]
	intput '&lt;pattern&gt;' '&lt;replacement&gt;' [# &lt;optional comments&gt;]
	intput '&lt;pattern&gt;' {&lt;replacecode&gt;} [# &lt;optional comments&gt;]
</pre>
<p>Where</p>
<ul>
	<li><i>output</i> keyword is optional and can be omitted</li>
	<li><i>input</i> keyword must be specified</li>
	<li><i>&lt;pattern&gt;</i> regular expression pattern; must be enclosed in single or double quotes</li>
	<li><i>&lt;replacement&gt;</i> replacement string; must also be enclosed in single or double quotes</li>
	<li><i>&lt;replacecode&gt;</i> replacement code; must be enclosed in curlies {}</li>
	<li><i>&lt;profile-name&gt;</i> must be a previuosly defined colour profile name from this file; can be quoted</li>
	<li><i>&lt;optional comments&gt;</i> comments can be placed on same line after <i>'#'</i> character</li>
</ul>
<p>Also refer to the default supplied <i>acli.sed</i> file for further syntax and examples.</p>
<p>To reload the <i>acli.sed</i> file on already running ACLI sessions the following embedded command can be used:</p>
<pre>
	@sed reload
</pre>
<p>This will first delete all sed patterns, like <i>@sed reset</i> does, and then will reload the <i>acli.sed</i> file</p>
</BODY>
</HTML>
